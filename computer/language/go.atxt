// /* go 程序设计语言 {{{1 */
= go 程序设计语言
David Yon <davidyon@hotmail.com>
v1.0, 2017-12-08
:toc: right
:numbered:
:icons: font
:source-highlighter: highlightjs
:highlightjsdir: highlight
:experimental:

// /* 程序组织结构 {{{2 */
== 程序组织结构（package)

// /* 字面常量 {{{2 */
== 字面常量

=== 符文（Rune literal）
符文是一个符文常量，是一个表示Unicode码值（code point）的整数值。一个符文表示
为由单引号引用的一个或者多个字符，如 'x', '\n' 等等。它可以引用除换行和未转译
单引号以外的任何字符。

单引号引用的简单字符表示这个字符本身。如果引用的字符序列由反斜杠开始，它表示由
编码为ASCII字符序列的一个Unicode码值，可以有多种表示方法。

NOTE: Go语言使用UTF-8对Unicode码值进行编码。因此多个UTF-8编码的字节值可以表示
一个整数值。

由四种使用数字常量表示Unicode码值（整数）的方法：

- \x 后面跟两个十六进制数字，如 'a' 可以写成 '\x61' 
- \u 后面跟四个十六进制数字，表示码值为0-FFFF的字符，如 'ä' 可以写成 '\uc3c4'
- \U 后面跟八个十六进制数字，表示更大Unicode码值的字符，特别是0x10FFFF和
  surrogate halves.
- \  后面跟三个八进制数字，它用于表示码值在0-255范围内的Unicode字符

如果反斜杠后面跟下面字符，它用于表示特殊的字符。

[source]
-----
\a   U+0007 alert or bell
\b   U+0008 backspace
\f   U+000C form feed
\n   U+000A line feed or newline
\r   U+000D carriage return
\t   U+0009 horizontal tab
\v   U+000b vertical tab
\\   U+005c backslash
\'   U+0027 single quote  (valid escape only within rune literals)
\"   U+0022 double quote  (valid escape only within string literals)
-----

其语法定义如下：

[source, EBNF]
----
rune_lit         = "'" ( unicode_value | byte_value ) "'" .
unicode_value    = unicode_char | little_u_value | big_u_value | escaped_char
.
byte_value       = octal_byte_value | hex_byte_value .
octal_byte_value = `\` octal_digit octal_digit octal_digit .
hex_byte_value   = `\` "x" hex_digit hex_digit .
little_u_value   = `\` "u" hex_digit hex_digit hex_digit hex_digit .
big_u_value      = `\` "U" hex_digit hex_digit hex_digit hex_digit
                           hex_digit hex_digit hex_digit hex_digit .
escaped_char     = `\` ( "a" | "b" | "f" | "n" |
                           "r" | "t" | "v" | `\` | "'" | `"` ) .

----

=== 字符串(String literals)
字符串常量表示一系列字符组成的值。存在两种字符串字面常量。其语法表现为

[source, EBNF]
-----
string_lit             = raw_string_lit | interpreted_string_lit .
raw_string_lit         = "`" { unicode_char | newline } "`" .
interpreted_string_lit = `"` { unicode_value | byte_value } `"` .
-----

==== 原生字符串（raw string literals）
原生字符串表示为由反单引号括起来的字符序列，比如 `foo` 。除了反单引号以外
，它可以包含任何字符。任何字符都没有特殊含义，包括反斜杠字符。在默认情况下使用
UTF-8 编码。回车字符 `\r` 在原生字符串中被忽略。

==== 解释字符串（interpreted string literals）
解释型字符串表示为双引号括起来的字符串序列，比如 "foo"。在双引号里面，字符串可
以包含除了换行符和未转译的双引号以外的任何字符。对于使用反斜杠进行转译的字符被
解释为符文字符（ `\'` 是非法的，而 `\"` 是合法的 ）。

三个八进制表示形式（如 \377 )和两个十六进制的表示形式（如 \xnn ）表示最终
字符串字节流的单个字节值，所有其它转译表示形式表示单个字符的UTF-8编码。例如在
一个字符串中 \377 和 \xFF 表示一个字节值（255），而 ÿ, \u00FF, \U000000FF and
\xc3\xbf 表示字符 U+00FF UTF-8 编码的两个字节0xc3 0xbf 。

下面的例子表示相同的字符串：

[source]
-----
"日本語"                                 // UTF-8 input text
`日本語`                                 // UTF-8 input text as a raw literal
"\u65e5\u672c\u8a9e"                    // the explicit Unicode code points
"\U000065e5\U0000672c\U00008a9e"        // the explicit Unicode code points
"\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"  // the explicit UTF-8 bytes
-----

下面是几个例子

[source]
-----
`abc`                // same as "abc"
`\n
\n`                  // same as "\\n\n\\n"
"\n"
"\""                 // same as `"`
"Hello, world!\n"
"日本語"
"\u65e5本\U00008a9e"
"\xff\u00FF"
"\uD800"             // illegal: surrogate half
"\U00110000"         // illegal: invalid Unicode code point
-----

// /* 类型{{{2 */
== 类型

=== Boolean types

=== Numeric types

=== String types

=== Array types

=== Slice types

=== Struct types

=== Pointer types

=== Function types

=== Interface types

=== Map types

=== Channel types

== 表达式

== 语句

// /* 并发 {{{2 */
[[concurrency]]
== 并发

=== go (goroutine)

=== channel

=== select

=== 互斥 （锁）

// /* go {{{2 */
== go
go 是一个Go 源代码的管理工具，使用这个工具可以进行源代码的版本控制（使用git）
，源代码的编译、链接生成可执行文件（build）以及生成可执行文件或在库文件的安装
。

=== go get
从git repository中check out代码

=== go build
生成可执行文件

=== go install
安装库文件

// /* gopath {{{2 */
== gopath
Go path 是用于 import 语句。它由 `go/build` 包实现。

=== GOPATH
这个环境变量定义了一系列用于查找 Go 代码的目录。在Unix下，多个目录使用冒号（:
）分隔；在Windows环境下使用分号（;）分隔。

除了标准的Go树，其它代码的位置必须使用这个变量进行说明，以便让get, build 和
install命令正确执行。

每个定义在GOPATH中的目录必须使用如下的标准目录结构：

src::
    命名为src的目录用于存放源代码。src目录中的子目录决定了 import 的路径或者可
    执行文件的名称。

pkg::
    命令为pkg的目录用于存放安装的包对象（installed package objects）。这些包对
    象安装目标操作系统和体系结构进行细分，分别放在使用操作系统和体系结构命名的
    目录中，这个目录直接作为 `pkg` 的子目录。

bin::
    这个目录用于存放生成的可执行命令。每个命令以生成它的源代码所在的目录命名。
    不是全目录，是最后一级目录。也就是说，对于 由`DIR/src/foo/quux` 源代码生成
    的命令会被安装为DIR/bin/quux，而不是 DIR/bin/foo/quux。将 DIR/bin 加入
    PATH ，可以直接执行被安装的命令。通过设置 `GOBIN` 目录，你可以将生成的命令
    安装到这个环境变量指定的目录而不是默认的 DIR/bin。 `GOBIN` 必须使用绝对目
    录。

下面是一个目录结构的例子：

[source, bash]
------
    GOPATH=/home/user/gocode

    /home/user/gocode/
        src/
            foo/
                bar/        (go code in package bar)
                    x.go
                quux/       (go code in package main)
                    y.go
        bin/
            quux            (installed command)
        pkg/
            linux_amd64/
                foo/
                    bar.a   (installed package object)
------

NOTE: 虽然 Go 在查找源代码时会搜索 GOPATH 定义的每个目录，但是新的包总是被下载
      到第一个目录。

=== Internal Directories
位于命名为 `internal` 目录下的代码仅能够被其直接父目录下的代码引用。例如

[source, bash]
----
    /home/user/gocode/
            src/
                crash/
                    bang/               (go code in package bang)
                        b.go
                foo/                    (go code in package foo)
                    fo.go
                    bar/                (go code in pacakge bar)
                        x.go
                    internal/
                        baz/            (go code in package baz)
                            z.go
                    quux/               (go code in pacakge main)
                        y.go        
----

文件z.go的代码 import 为 `foo/internal/baz` ，但是这个 `import` 语句仅仅能够在
以 `foo` 为根的目录中代码中使用。 `foo/f.go` `foo/bar/x.go` and
`foo/quux/y.go` 能够 `import "foo/internal/baz"` ，但是源文件
`crash/bang/b.go` 不能够使用这个 `import` 语句。

=== Vendor Directories
Go 1.6 支持对外部依赖的包文件进行本地的重新定义，这个方式被成为 vendoring。被
命名为 `vendor` 目录下的代码仅能够被 `vendor` 目录的直接父目录下的代码引用（
import），并且引用的目录格式需要去掉包括 `vendor` 在内的所有父目录结点。

下面是一个 `vendor` 目录的例子，它具有与 `internal` 相同的作用域规则，但是

- `z.go` 代码的引用规则为 `import "baz"` ，而不是 `import "foo/vendor/baz"` 。
- 在 `vendor` 目录下的代码会覆盖掉高层的代码。例如，在以 `foo` 为根结点的子树
  中，对 `crash/bang` 的引用会定位到 `foo/vendor/crash/bang` ，而不是顶层的
  `crash/bang`
- `vendor` 目录不影响使用 `go get` check out 代码时存放的位置

[source, bash]
----
    /home/user/gocode/
            src/
                crash/
                    bang/               (go code in package bang)
                        b.go
                foo/                    (go code in package foo)
                    fo.go
                    bar/                (go code in pacakge bar)
                        x.go
                    vendor/
                        crash/
                            /bang/      (go code in package bang)
                                b.go
                        baz/            (go code in package baz)
                            z.go
                    quux/               (go code in pacakge main)
                        y.go        
----


// /* IDE {{{2 */
== IDE
完整的IDE或插件参见 <<3,Go IDE and Text Editor Plugins>> 。

几个主要的IDE及其对Go语言支持程度，参见 https://golang.org/doc/editors.html[Go
Editor]。

.Vim Plugins
- https://github.com/fatih/vim-go[vim-go]

// /* 参考资料 {{{2 */
== 参考资料
[bibliography]
- [[[1]]] https://golang.org/ref/spec[go 语言规约]
- [[[2]]] https://tour.golang.org/list[go 语言入门指导]
- [[[3]]] https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins[Go IDE
  and Text Editor Plugins]
