// /* Javascript {{{1 */
= Javascript
David Yon <davidyon@hotmail.com>
v1.0, 20202-02-14
:toc: right
:toclevels: 4
:numbered:
:icons: font
:source-highlighter: highlightjs
:highlightjsdir: highlight
:experimental:
:sectanchors: 5

// /* 历史  {{{2 */
== 历史
增加用户的交互并且减少与服务器的通讯次数，客户端做更多的事情，比如用户输入表格
的验证。两个选项：Java Applet 以及 LiveScript

* Netscape: LiveScript 1995
* Netscape 2.0: LiveScript -> JavaScript
* IE 3.0: JScript （Javascript + IE 特有）
* ECMAScript (European Computer Manufactures Association) ECMA-262: 进行标准化
** ECMAScript
** Document Object Model (DOM)
** Browser Object Model (BOM)

// /* 应用  {{{2 */
== 应用

* Web 应用：辅以HTML5，可完成应用缓存，客户端存储，数据库。另外Chrome
  WebKit还增加了 service workers以及浏览器push的功能
* 服务器端代码： 如 Node.js
* 移动应用：使用 *PhoneGap* *Titanium* 可以创建各种移动平台的应用。另
  外 FirefoxOS 平台的应用完全使用 Javascript， HTML，和 CSS书写的。
* 多媒体应用： 用于Flash或者Flex的 ActionScript 是基于 ECMAScript。
* 命令行工具或者脚本：使用 *Windows Scripting Host （WSH）* 或者
  WebKit 的 *JavascriptCore* 可以创建桌面管理工具。后者内置在所有的Mac
  系统中。
* 桌面应用的扩展或者插件： Dreamweaver， Photoshop，或者浏览器
* 跨操作系统的桌面应用：使用 Mozilla 的 *XULRunner* 和 *Electron* 。
  *Electron* 仅使用 Javascript，HTML 和 CSS 已经用于构建 Slock， Atom，
  和 Visual Studio Code 等非常流行的桌面应用。
* *Emscripten* 能够将使用C/C++写的代码编译成 _asm.js_ 格式， 这个文件可以在浏
   览器内部运行。
*  测试框架 *PhantomJS* 使用 Javascript 实现。 （该项目现在处于suspending状态）

// /* 发展  {{{2 */
== ECMAScript 发展

=== ES5（ECMAScript5）

*  一个重要版本，2009年12月被正式接受，现在已经在所有主要浏览器和服务器端技术
   中得到支持。
*  变化包括：
   **  几个重要的语法改变
   **  扩展标准库
   **  引入新的结构， 如引入新的对象以及所谓的严格模式（strict mode）


=== ES6（ECMAScript6）

*  2015年6月17 被正式接受，绝大多数新的约定已经被主要浏览器接受
*  可以将 ES6 的程序转换成 ES5，从而可以在不支持ES6的环境下运行
*  在语言方面做了很大改变，主要包括
   **  已有特征的语法改变；如：classes 和 promises
   **  新的语言特征； 如 generators
*  语法的改进使得程序的编写更加简洁，程序更容易维护。新的特征使得语言本身支持
   原来必须使用第三方工具才能实现的特征，这改变了使用JavaScript编码的思维方式
*  ES6， ECMAScript6 和 ECMAScript2015 是这个版本的不同称呼

=== 版本支持状况

*  可以在  http://kangax.github.io/compat-table/es6/[kangax 网站] 上可以查看到不
   同版本在主要浏览器和服务框架下的支持情况。
*  http://babeljs.io/repl/[*Babel*] 等转换器可以将 ES6 转换成 ES5

// /* 工具 {{{2 */
== 工具

*  浏览器： 现在的浏览器都有一个控制台为开发者调试Javascript
   **  WebKit‘s console
     *** 用于Safari和Chrome
     *** 选择控制台（console）tab页，运行在当前装在的页面的上下文
     *** 支持自动完成
     *** 支持历史命令浏览执行：使用上下箭头查询
     *** 控制台只给一行用于输入，可以使用 *分号* 一行输入多条语句 或者使用
         kbd:[Shift] + kbd:[Enter] 进行换行
   **  Firefox
     *** Tools | Web Developer | Web Console 可以调出控制台界面
     
*  *JavaScriptCore* on Mac
   **  在Mac上，可以使用命令行工具 *jsc* 在终端上直接学习JavaScript代码
   **  可以将下面的shell语句定义到 ～/.profile 文件中
+
[source,bash]
------
 alias jsc='/System/Library/Frameworks/JavaScriptCore.framework/Versions/Current/Resources/jsc'
------

*  Node.js
    **  Node.js 包括功能强大的命令行工具。安装完 Node.js 后，在终端上执行
        *node* 就可以 REPL 方式执行JavaScript语句
    **  *node* 命令后面加 JavaScript 脚本文件，将以非交互的方式执行， 如
         `node test.js` 

== 变量



[source,javascript]
------
var a;					// <1>
var thisIsAVariable;			// <2>
var _and_this_too;			// <1><3>
var mix12tree;				// <1><3>
var v1, v2, v3 = "hello", v4 = 4, v5;  	// <1><4>
var $v6,       	 	          	// <1><3>
    v$7 = 'world',
    v8;
var case_matters = 'lower';		// <1><2>
var CASE_MATTERS = 'upper';		// <1><2>
------
<1>  使用 *var* 说明一个变量，在说明变量的时候可以赋给初始值
<2>  变量名是大小写敏感的
<3>  变量名由字符，数字，下划线以及$符组成，数字不能作为起始字符
<4>  一条 *var* 语句可以定义一个或者多个变量，多个变量可以同时赋给一个相同的值

== 基本类型
JavaScript 包括如下基本类型:

-  数字
-  字符串
-  布尔
-  Undefined
-  Null

除了基本外，其它的都是对象。使用操作符 typeof 可以或者一个值所属的类型。

=== 数字型 （Number）

-  数字型有正负之分，如 -3，3
-  数字型有整数和浮点数， 如 3 和 3.14
-  在表示形式上，有
   **  十进制（decimal）： 253
   **  十六进制（hexadecimal）：0x10 或者 0X10
   **  八进制（octal)：0377 或者 0o377 或者 0O377。后面两种表示方法是 ES6 引入
       的
   **  二进制（binary）：0b111 或者 0B111。二进制的表示法是 ES6 新引入的
   **  指数（exponent）： 1e1 或者 1E1， 2e-3
-  Infinity 和 -Infinity：无限大和无限小。这两个值用于表示 JavaScript 无法表示
   的数。如果超过了下面的值范围，在Javascript 的值将是 Infinity 或者
   -Infinity。 比如 6/0， 1e309
   **  最大的数：1.7976931348623157e+308
   **  最小的数：5e-324
   **  关于Infinity的表达式
       ***  Infinity - Infinity = NaN （ 不是0）
       ***  Infinity - 20 = Infinity
       ***  Infinity / 20 = Infinity
       ***  Infinity * 0  = NaN
       ***  typeof Infinity 的值是 number
       ***  全局方法 isFinite(Infinity) = false
       ***  ES6 引入的 Number.isFinite(Infinity) = false。上面的全局方法在判断
            之前需要做类型转换，但是这种方式不需要，更精确。
-  NaN：不是数字 Not a Number
   **  用于无法确定数字值的情况：比如 8 * "test"
   **  关于NaN的表达式
       ***  typeof NaN 的值是 number
       ***  NaN 和其它任何数字的运算返回的结果是 NaN, 如 1 + 2 + NaN = NaN
       ***  全局方法 isNaN(123) = false, isNaN("test") = true, 
            isNaN(123/"abc") = true。isNaN需要对参数进行数字型的转换，所以对于
            ”test“ 它的值是true。这不是很精确。
       ***  ES6 引入的 Number.isNaN(123)=false, Number.isNaN("test") = false,
            Number.isNaN(123/"abc")= true
-  Number.isInteger(): ES6 新引入的方法，当参数值是有限值且不包含小数点返回true。

=== 字符串

*  字符串的值使用一对单引号或者双引号进行引用，如 "Hello,world" 'Go Go Go'
*  字符串可以使用 + 操作符进行衔接
*  除了 + ，其它数字操作符的运用于字符串时，字符串会先转换成数字，结果是数字型
+
[source,javascript]
------
var s = '1';
s = 3 * s;          
console.log(s);         //3
s++;
console.log(s);         //4
var s = "1 * 5";
s = 10 * s;
console.log(s);         //NaN
var s = "1 add five";
s = 10 * s;
console.log(s);         //NaN
var n = 1;
n = "" + n;         
console.log(n);         //'1'
------

==== 字符串模版
ES6 引入了字符串模版用于在字符串中嵌入表达式。有两种模版方式：常规字符串模版，
定制字符串模版

===== 常规字符串模版

*  模版使用一对 ` 符号扩起来的字符串
*  表达式使用的格式为 ${ 表达式 }

[source, javascript]
-----
var a = 10;
var b = 10;
console.log(`Sum is ${a + b} and Multiplication would be ${a * b}.`); <1>
-----
<1>  值为 Sum is 20 and Multiplication would be 100.

===== 定制字符串模版 (Tagged Template Literals)

-  定制字符串模版允许用户通过定义一个新的方法重新定义常规字符串模版的输出格式。
-  语法上，定制字符串模版是在常规字符串模版加以要调用的方法名作为参数。

[source, javascript]
------
function transform(strings, ...subst) {             //<1>
    console.log(strings);
    console.log(subst);
}

var fn = "James";                                   //<2>
var ln = "Bond"                                     //<2>

transform`Name is ${ln}, ${fn} ${ln}`               //<3>
transform(["Name is ",", "," ",""],ln,fn,ln)        //<4>
transform`${ln}Name is ${ln}${fn} ${ln}`            //<3>
transform(["","Name is ","", " ",""],ln,ln,fn,ln)   //<4><5>
------
<1>  定义定制模版要调用的方法 `transform`
<2>  定义模版变量使用的变量
<3>  定制模版方法名后面紧跟着常规模版定义
<4>  前面的定制模版相当于这样的方法调用，注意如果表达式在最前面或者最后面或者
相邻，需要插入一个空的字符串。
<5>  模版字符串的中 _转义_ 字符在通常情况下会有特殊的含义，如果希望保持字面字
符可以使用Raw形式，如将上列中的 `strings` 改为 `strings.raw`，再如取strings的第
一个字面值， `strings.raw[0]`
