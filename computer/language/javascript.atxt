// /* Javascript {{{1 */
= Javascript
David Yon <davidyon@hotmail.com>
v1.0, 20202-02-14
:toc: right
:toclevels: 4
:numbered:
:icons: font
:source-highlighter: highlightjs
:highlightjsdir: highlight
:experimental:
:sectanchors: 5

// /* 历史  {{{2 */
== 历史
增加用户的交互并且减少与服务器的通讯次数，客户端做更多的事情，比如用户输入表格
的验证。两个选项：Java Applet 以及 LiveScript

* Netscape: LiveScript 1995
* Netscape 2.0: LiveScript -> JavaScript
* IE 3.0: JScript （Javascript + IE 特有）
* ECMAScript (European Computer Manufactures Association) ECMA-262: 进行标准化
** ECMAScript
** Document Object Model (DOM)
** Browser Object Model (BOM)

// /* 应用  {{{2 */
== 应用

* Web 应用：辅以HTML5，可完成应用缓存，客户端存储，数据库。另外Chrome
  WebKit还增加了 service workers以及浏览器push的功能
* 服务器端代码： 如 Node.js
* 移动应用：使用 *PhoneGap* *Titanium* 可以创建各种移动平台的应用。另
  外 FirefoxOS 平台的应用完全使用 Javascript， HTML，和 CSS书写的。
* 多媒体应用： 用于Flash或者Flex的 ActionScript 是基于 ECMAScript。
* 命令行工具或者脚本：使用 *Windows Scripting Host （WSH）* 或者
  WebKit 的 *JavascriptCore* 可以创建桌面管理工具。后者内置在所有的Mac
  系统中。
* 桌面应用的扩展或者插件： Dreamweaver， Photoshop，或者浏览器
* 跨操作系统的桌面应用：使用 Mozilla 的 *XULRunner* 和 *Electron* 。
  *Electron* 仅使用 Javascript，HTML 和 CSS 已经用于构建 Slock， Atom，
  和 Visual Studio Code 等非常流行的桌面应用。
* *Emscripten* 能够将使用C/C++写的代码编译成 _asm.js_ 格式， 这个文件可以在浏
   览器内部运行。
*  测试框架 *PhantomJS* 使用 Javascript 实现。 （该项目现在处于suspending状态）

// /* 发展  {{{2 */
== ECMAScript 发展

=== ES5（ECMAScript5）

*  一个重要版本，2009年12月被正式接受，现在已经在所有主要浏览器和服务器端技术
   中得到支持。
*  变化包括：
   **  几个重要的语法改变
   **  扩展标准库
   **  引入新的结构， 如引入新的对象以及所谓的严格模式（strict mode）


=== ES6（ECMAScript6）

*  2015年6月17 被正式接受，绝大多数新的约定已经被主要浏览器接受
*  可以将 ES6 的程序转换成 ES5，从而可以在不支持ES6的环境下运行
*  在语言方面做了很大改变，主要包括
   **  已有特征的语法改变；如：classes 和 promises
   **  新的语言特征； 如 generators
*  语法的改进使得程序的编写更加简洁，程序更容易维护。新的特征使得语言本身支持
   原来必须使用第三方工具才能实现的特征，这改变了使用JavaScript编码的思维方式
*  ES6， ECMAScript6 和 ECMAScript2015 是这个版本的不同称呼

=== 版本支持状况

*  可以在  http://kangax.github.io/compat-table/es6/[kangax 网站] 上可以查看到不
   同版本在主要浏览器和服务框架下的支持情况。
*  http://babeljs.io/repl/[*Babel*] 等转换器可以将 ES6 转换成 ES5

// /* 工具 {{{2 */
== 工具

*  浏览器： 现在的浏览器都有一个控制台为开发者调试Javascript
   **  WebKit‘s console
     *** 用于Safari和Chrome
     *** 选择控制台（console）tab页，运行在当前装在的页面的上下文
     *** 支持自动完成
     *** 支持历史命令浏览执行：使用上下箭头查询
     *** 控制台只给一行用于输入，可以使用 *分号* 一行输入多条语句 或者使用
         kbd:[Shift] + kbd:[Enter] 进行换行
   **  Firefox
     *** Tools | Web Developer | Web Console 可以调出控制台界面
     
*  *JavaScriptCore* on Mac
   **  在Mac上，可以使用命令行工具 *jsc* 在终端上直接学习JavaScript代码
   **  可以将下面的shell语句定义到 ～/.profile 文件中
+
[source,bash]
------
 alias jsc='/System/Library/Frameworks/JavaScriptCore.framework/Versions/Current/Resources/jsc'
------

*  Node.js
    **  Node.js 包括功能强大的命令行工具。安装完 Node.js 后，在终端上执行
        *node* 就可以 REPL 方式执行JavaScript语句
    **  *node* 命令后面加 JavaScript 脚本文件，将以非交互的方式执行， 如
         `node test.js` 

== 注释

[source, javascript]
------
// 这个一个注释行
var a = 1;  // 这是尾部注释
/* 多行注释写在一行 */
/*
   多行注释
*/
------

== 变量



[source,javascript]
------
var a;					// <1>
var thisIsAVariable;			// <2>
var _and_this_too;			// <1><3>
var mix12tree;				// <1><3>
var v1, v2, v3 = "hello", v4 = 4, v5;  	// <1><4>
var $v6,       	 	          	// <1><3>
    v$7 = 'world',
    v8;
var case_matters = 'lower';		// <1><2>
var CASE_MATTERS = 'upper';		// <1><2>
------
<1>  使用 *var* 说明一个变量，在说明变量的时候可以赋给初始值
<2>  变量名是大小写敏感的
<3>  变量名由字符，数字，下划线以及$符组成，数字不能作为起始字符
<4>  一条 *var* 语句可以定义一个或者多个变量，多个变量可以同时赋给一个相同的值

== 基本类型
JavaScript 包括如下基本类型:

-  数字
-  字符串
-  布尔

为了描述只说明没有定义的情况，引入了 undefined 类型，它具有唯一的值`undefined`
。除了基本类型外，其它的都是对象。使用操作符 typeof 可以或者一个值所属的类型。
对象类型存在一个特殊的值 null，表示没有被初始化，没分配空间。

=== 数字型 （Number）

-  数字型有正负之分，如 -3，3
-  数字型有整数和浮点数， 如 3 和 3.14
-  在表示形式上，有
   **  十进制（decimal）： 253
   **  十六进制（hexadecimal）：0x10 或者 0X10
   **  八进制（octal)：0377 或者 0o377 或者 0O377。后面两种表示方法是 ES6 引入
       的
   **  二进制（binary）：0b111 或者 0B111。二进制的表示法是 ES6 新引入的
   **  指数（exponent）： 1e1 或者 1E1， 2e-3
-  Infinity 和 -Infinity：无限大和无限小。这两个值用于表示 JavaScript 无法表示
   的数。如果超过了下面的值范围，在Javascript 的值将是 Infinity 或者
   -Infinity。 比如 6/0， 1e309
   **  最大的数：1.7976931348623157e+308
   **  最小的数：5e-324
   **  关于Infinity的表达式
       ***  Infinity - Infinity = NaN （ 不是0）
       ***  Infinity - 20 = Infinity
       ***  Infinity / 20 = Infinity
       ***  Infinity * 0  = NaN
       ***  typeof Infinity 的值是 number
       ***  全局方法 isFinite(Infinity) = false
       ***  ES6 引入的 Number.isFinite(Infinity) = false。上面的全局方法在判断
            之前需要做类型转换，但是这种方式不需要，更精确。
-  NaN：不是数字 Not a Number
   **  用于无法确定数字值的情况：比如 8 * "test"
   **  关于NaN的表达式
       ***  typeof NaN 的值是 number
       ***  NaN 和其它任何数字的运算返回的结果是 NaN, 如 1 + 2 + NaN = NaN
       ***  全局方法 isNaN(123) = false, isNaN("test") = true, 
            isNaN(123/"abc") = true。isNaN需要对参数进行数字型的转换，所以对于
            ”test“ 它的值是true。这不是很精确。
       ***  ES6 引入的 Number.isNaN(123)=false, Number.isNaN("test") = false,
            Number.isNaN(123/"abc")= true
-  Number.isInteger(): ES6 新引入的方法，当参数值是有限值且不包含小数点返回true。

=== 字符串

*  字符串的值使用一对单引号或者双引号进行引用，如 "Hello,world" 'Go Go Go'
*  字符串可以使用 + 操作符进行衔接
*  除了 + ，其它数字操作符的运用于字符串时，字符串会先转换成数字，结果是数字型
+
[source,javascript]
------
var s = '1';
s = 3 * s;          
console.log(s);         //3
s++;
console.log(s);         //4
var s = "1 * 5";
s = 10 * s;
console.log(s);         //NaN
var s = "1 add five";
s = 10 * s;
console.log(s);         //NaN
var n = 1;
n = "" + n;         
console.log(n);         //'1'
------

==== 字符串模版
ES6 引入了字符串模版用于在字符串中嵌入表达式。有两种模版方式：常规字符串模版，
定制字符串模版

===== 常规字符串模版

*  模版使用一对 ` 符号扩起来的字符串
*  表达式使用的格式为 ${ 表达式 }

[source, javascript]
-----
var a = 10;
var b = 10;
console.log(`Sum is ${a + b} and Multiplication would be ${a * b}.`); <1>
-----
<1>  值为 Sum is 20 and Multiplication would be 100.

===== 定制字符串模版 (Tagged Template Literals)

-  定制字符串模版允许用户通过定义一个新的方法重新定义常规字符串模版的输出格式。
-  语法上，定制字符串模版是在常规字符串模版加以要调用的方法名作为参数。

[source, javascript]
------
function transform(strings, ...subst) {             //<1>
    console.log(strings);
    console.log(subst);
}

var fn = "James";                                   //<2>
var ln = "Bond"                                     //<2>

transform`Name is ${ln}, ${fn} ${ln}`               //<3>
transform(["Name is ",", "," ",""],ln,fn,ln)        //<4>
transform`${ln}Name is ${ln}${fn} ${ln}`            //<3>
transform(["","Name is ","", " ",""],ln,ln,fn,ln)   //<4><5>
------
<1>  定义定制模版要调用的方法 `transform`
<2>  定义模版变量使用的变量
<3>  定制模版方法名后面紧跟着常规模版定义
<4>  前面的定制模版相当于这样的方法调用，注意如果表达式在最前面或者最后面或者
相邻，需要插入一个空的字符串。
<5>  模版字符串的中 _转义_ 字符在通常情况下会有特殊的含义，如果希望保持字面字
符可以使用Raw形式，如将上列中的 `strings` 改为 `strings.raw`，再如取strings的第
一个字面值， `strings.raw[0]`

=== 布尔型

-  布尔型有两个值： *true* 和 *false*
-  操作符 ! (NOT), && (AND) 和 || (OR)
-  任何值可以转换成布尔值。除了下面值转换成 *false* 以外，其它类型的值都转换成
   *true*
   **  空字符串 ""
   **  null
   **  undefined
   **  数字 0
   **  数字 NaN
   **  布尔值 false
-  逻辑运算中可能包括非布尔表达，这时运算值的类型取决于最后能够决定值个哪个表
   达式的类型。如下面的表达式
+
[source, javascript]
------
true || "something"             //true
true && "something"             //"something"
true && "something" && true     //true
var mynumber = mynumber || 10   //如果 mynumber 没有定义或者0 等于 10， 否则等于 mynumber
------

==== 比较运算符

[cols="1m,5a,2a"]
|===
| 运算符 | 描述 | 例子

| ==  | 松散比较: 在进行比较之前将操作数转换成相同的类型，如果值相等返回 _true_ m| 1 == 1;   //true +
                                                                                                    1 == "1";   //true
| === | 严格比较：操作数的类型相同并且相等返回 _true_                        m| 1 === 1;   //true +
                                                                                                     1 === "1";   //false
| !=  | 操作数的类型转换成相同类型后，如果不等返回 _true_                     m| 1 != 1      //false +
                                                                                                      1 != "1"   //false
| !== | 如果操作数的类型不同或者不想等返回 _true_                            m| 1 !== 1     //false +
                                                                                                      1 !== "1"  //true
|===

其它运算符 `>` , `<` , `>=`, `<=` , 也是转换成相同的类型后进行比较。

=== Undefined

-  Undefined 类型只有一个值 `undefined`
-  如果一个变量只说明没有对其赋值，它的值是 `undefined` 。
-  只说明没定义的变量的类型是 *undefined*
-  undefined 转换其它基本类型的值如下：
   **  数字： NaN
   **  布尔： false
   **  字符串： "undefined"

[source, javascript]
------
var somevar
typeof somevar           // "undefined"
somevar === undefined    // true
1 * undefined            // NaN
!!undefined              //false
------

=== Null

-  null不是数据类型，是一个值，它的类型是 object
-  null 转换其它基本类型时，其值如下：
   **  数字： 0
   **  布尔： false
   **  字符串："null"
   
== 数组

*   数组的索引从0开始；
*   数组的元素可以是任何类型，可以不同；
*   数组是变长的，如果使用大于当前数组长度的索引对数据进行赋值，数组的长度增加，
    中间没有赋值的项的值是 *undefined*
*   可以使用 *delete* 操作符删除一个数组中每个元素，这个元素被删除后，该值变成
    _undefined_

[source,javascript]
------
var a = [1 , 2, 3];
typeof a;               // object
a[5] = "hello";         // [1, 2, 3, undefined, undefined, "hello"]
delete a[1];            // [1, undefined, 3, undefined, undefined, "hello"]
var b = [[1, 2, 3], [4, 5, 6]];  // array of array
b[1][0];                // 4
------

== 控制结构

=== 条件语句

==== 标准方式

[source, javascript]
------
var a = 1;
if (a > 2 || a < -2) {
  result = 'a is not between -a and 2';
} else if (a === 0 && b === 0) {
  result = "both a and b are zeros";
} else if (a === b) {
  result = " a and b are equal";
} else {
  result = "I give up";
}
------

==== 简介方式：

[source, javascript]
------
var a  = 1;
var result = (a === 1)? "a is one" : "a is not one";
------

=== Switch 语句

[source, javascript]
------
var a = "1",
     result = "";
switch (a) {
case 1:
    result = "Number 1";
    break;
case "1":
    result = "String 1";
    break;
default:
    result = " I don't know";
    break;
}
------

=== 循环语句

====  while

[source, javascript]
------
var i = 0;
while ( i< 10 ) {
  i++;
}
------

==== do while

[source, javascript]
------
var i = 0;
do {
  i++;
} whil (i < 10);
------

==== for

[source, javascript]
------
var num = 0;
for (var i = 0; i < 100; i++) {
   num += i;
}

var a = ['a', 'b', 'c', 'd', 'x', 'y', 'z'];
var result = '\n';

for (var i in a) {
    result += 'index: ' + i + ', value: ' + a[i] + '\n';
}
------

== 函数

=== 语法

*  函数由关键字 *function* ，函数名， 参数 和 代码块组成
+
[source, javascript]
------
function sum (a, b) {
  var c = a + b;
  return c;
}

var result = sum(1, 2);
------

=== 参数

*  函数的实参数目可以大于形参的数目，多余的参数会自动被忽略；如果小于形参，其
   默认值是 _undefined_
+
[source, javascript]
------
sum (1, 2, 3, 4, 5);      //no error, and value is 3
------

*  每个函数存在一个特殊的内置变量 *arguments* ，它会自动被创建，它是一个类似于
   数组的对象，用于存放所有的参数
+
[source, javascript]
------
function sumAny () {
  var i, res = 0,
      number_of_params = arguments.length;
  for (i=0; i < number_of_params; i++) {
      res += arguments[i];
  return res;
}

sumAny(1, 1, 1);      //3
sumAny(1, 2, 3, 4);   //10
sumAny(5);            //5
sumAny();             //0
------

*  ES6 函数的参数可以定义默认值, 并且默认值可以是另外一个参数。
+
[source, javascript]
------
function s(fog_level=10, spark_level=fog_level*10) {
    console.log(`Fog Level: ${fog_level} and spark_level: ${spark_level}`)
}

s(10);                  // Fog Level: 10 and spark_level: 100
s(undefined, 200);      // Fog Level: 10 and spark_level: 200
                                  // 第一个参数因为没有定义使用默认值
------

*  ES6 引入了其余参数（rest parameter）。其余参数能够将任意多个参数以数组的形
   式传递给函数，一个参数只能存在一个其余参数，并且其余参数位于所有形参的最后
   一个。在语法上，其余参数前面使用 `...` 来修饰。
*  其余参数与 *arguments* 的区别在于，其余参数是一个数组，可以使用数组的所有操
   作
+
[source, javascript]
------
function say(first, ...others) {       <1>
    console.log(Array.isArray(others));         //true
    console.log(Array.isArray(arguments));      //false
    console.log(`first is ${first}, and others are ${others}`);    //first is cat, and others are dog,bee,cow,cock
}
say ("cat", "dog", "bee", "cow", "cock");
------
<1>  语法上，其余参数由三个点号 `...` 标识

=== 扩展操作符

*  ES6 引入了扩展操作符（spread operator），它作用于一个数组，把它分解为一系列
   的数组元素
+
[source, javascript]
------
function sumAll (a,b,c) {
     return a+b+c;
} 
var numbers = [6,7,8] 

/* 
  ES5 way of passing array as an argument of a function 
*/
console.log(sumAll.apply(null,numbers)); //21

//ES6 Spread operator 
console.log(sumAll(...numbers))          //21  <1>

var midweek = ['Wed', 'Thu'];
var weekend = ['Sat', 'Sun'];
var week = ['Mon', 'Tue', ...midweek, 'Fri', ...weekend];
console.log(wee)                        // ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
------
<1>  扩展操作法 ...

=== 内置函数

* parseInt() 
* parseFloat()
* isNaN()
* isFinite()
* encodeURI()
* encodeURIComponent()
* decodeURI()
* decodeURIComonent()
* eval()

=== 变量作用域

==== var 函数作用域
使用 *var* 说明的变量具有函数作用域

*  定义在任何函数之外的变量是 *global* 变量
*  定义在函数中的变量作用域是这个函数
*  定义在控制语句块中的变量作用域也是整个函数

[source, javascript]
------
var a = 123;

function f () {
    console.log(`a is : ${a}`);      // a is : undefined <1>
    var a = 1;
    console.log("a is : " + a);     // a is : 1
}
------
<1>  因为 a 在函数中定义，无论它在什么地方定义，都相当于它在函数的起始位置进行
了说明。这种方式在 JavaScript 中称为变量提升

==== 块作用域

ES6 引入了 `let` 和 `const` 关键字用来说明变量。使用这种方式说明的变量具有块作
用域，这有别于使用 `var` 说明的变量。

*  const 用于定义一个不能被修改的量；
*  使用这两个关键字定义的变量提升到这个块
*  重复定义相同的块变量会报错
*  块变量再未定义前变使用会报错

[source, javascript]
------
var a = 1;
var b = 1;
{
    let a = 2;
    console.log(a);     // 2
    var b = 3;
}
console.log(a);        // 1
console.log(b);        // 3
------

*  可以定义匿名函数
*  函数是 first-class 对象， 可以赋值，作为参数，返回值
*  函数定义可以嵌套
*  函数可以重新定义自身
*  闭包
*  箭头函数（lambda 表达式）
