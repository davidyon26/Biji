// /* Python Language {{{1 */
= Python Language
David Yon <davidyon@hotmail.com>
v1.0, 2017-11-03
:toc: right
:numbered:
:icons: font
:source-highlighter: highlightjs
:highlightjsdir: highlight
:experimental:

更详尽的内容请参考<<5,Python Tuturial>>

// /* Python v3 & v2 {{{2 */
== V3 & V2
版本3 和版本2 的主要区别在于

- Python v3 是基于Unicode的, 而 Python v2 是基于ASCII. 

// /* Comment {{{2 */
== Comment
 注释可以是单独一行, 或者前面带有空格或代码，但是字符串文本中的#不作为注释行
 代表# 字符本身。

[source,python]
----
# this is the first comment
spam = 1  # and this is the second comment
          # ... and now a third!
text = "# This is not a comment because it's inside quotes."
----

// /* 变量和数据类型 {{{2 */
== 变量和数据类型

=== 变量

- 命名: [a-zA-Z_][a-zA-Z_0-9]* +
    ** 首字符是字母下划线, 小写或者大写阿拉伯字母. 
    ** 数字不能作为第一个字符.
    ** 后面的字符可以是大小写字母, 数字或者下滑线.
- 关键字不能用于变量名: +
    使用命令 `print(keyword.kwlist)` 可以打印所有关键字. 其中 _keyword_ 是
    python标准模块名. 
- 变量先赋值再使用, 变量的类型由所赋值决定
    ** 只有当对一个变量赋值的时候, 这个变量才被创建并赋予相应的数据类型.
    ** 变量的值和类型可能由于被重新赋值而发生改变.
- 可以使用标准内建函数 _print_, _type_ 打印一个变量所属的类型.
- 可以使用标准内建函数 _int_, _float_ 等对一个变量值的数据类型进行转换.


=== 数据类型
Python 主要包括下面数据类型：

. Booleans
. <<DataType_Number,Numbers>>
. <<DataType_String,Strings>>
. Bytes
. <<DataType_List,Lists>>
. Tuples
. Sets
. Dictionaries

// /* Number {{{2 */
[[DataType_Number]]
== Number

=== 类型

[cols="1,2,7a"]
. 相关数据类型
|===
| type | syntax | comment

| int | |
| float | 
| CPU在转换浮点类型时存在精度的问题, 会出现 5.2*9 =
46.800000000000004的情况.
| Decimal | |
| Fraction | |
| complex number | | 
|===

=== 算术运算
. Python 数学算术运算
[cols="1m,4a"]
|===
| Operator | Description

| +     | Addition
| -     | Subtraction
| *     | Multiplication
| /     
| Division +
NOTE: 作为 Python v3.2 的新特征, Python会自动将除法运算的值转换成浮点类型, 尽
管可能两个操作数都是整型.
| %     | Modulus
| //    | Floor Division
| **    | Exponentiation
| &     | Binary AND
| \|    | Binary OR
| ^     | Binary XOR
| ~     | Binary ones complement
| <<    | Binary left shift
| >>    | Binary right shift
| and   | Logical AND
| or    | Logical OR
| not   | Loginal NOT
|===

// /* String {{{2 */
[[DataType_String]]
== String 
在 Python 中由单引号或者双引号扩起来的一个或者多个字符被解析为String（字符串）
。Python也支持多行字符串，这时需要使用三个单引号后者双引号扩起来。

在 Python 2 中，字符默认的是ASCII而不是Unicode，在后续版本中支持Unicode。而在
Python 3 中，所有的字符都是Unicode

语法:: 
 `'...'` +
  `"..."`  + 
  `'''...'''` +
  `"""..."""`

=== 转义
使用转义字符 `\` 对一些特殊字符进行转义，如引号，换行符

[source,python]
------
>>> '"Isn\'t," she said.'
'"Isn\'t," she said.'  <1>
>>> print('"Isn\'t," she said.')
"Isn't," she said.    <2>
------
<1> 如果不是用print函数， \' 原封不动的包含在输出中
<2> 使用 print(),  援引字符字符，如\' 或者 \n被解释

Unicode字符转义::
    Python 3支持使用 `\u####` (####是四个十六进制字符) 的转移序列表示任何
    unicode 字符.

=== raw string
在第一个引号前增加 `r` 字符串. 对于原生字符串中的转义字符不被解释。每行的换行
符在输出中保留，如果希望两行输出为一行，被续行的那行字符串需要以 `\` 结尾。 
+
[source, python]
----
>>> print('C:\some\name')  # here \n means newline!
C:\some
ame
>>> print(r'C:\some\name')  # note the r before the quote
C:\some\name
----

=== 跨多行
使用 ''' or """ 能够使用一个字符串跨多行。每行的换行符在输出中保留，如果希望
两行输出为一行，被续行的那行字符串需要以 `\` 结尾。
+
[source,python]
----
print("""Usage: \
... thingy [OPTIONS]
...     -h                        Display this usage message
...     -H hostname               Hostname to connect to
... """)
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to

>>>
----

=== 字符串衔接 (String concatenation)
如果要显示的字符串比较长

// /* List {{{2 */
[[DataType_List]]
== List

=== methods

list.append(x)::
    加一个数据项x 到到一个 list 对象。相当于 `a[len(a):] = [x].

list.extend(iterable)::

list.insert(i,x)::

list.remove(x)::

list.pop([i])::

list.clear()::

list.index(x[ ,start[, end])::

list.count(x)::

list.sort(key=None, reverse=False)::

list.reverse()::

list.copy()::

[source, python]
------
>>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana']
>>> fruits.count('apple')
2
>>> fruits.count('tangerine')
0
>>> fruits.index('banana')
3
>>> fruits.index('banana', 4)  # Find next banana starting a position 4
6
>>> fruits.reverse()
>>> fruits
['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']
>>> fruits.append('grape')
>>> fruits
['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape']
>>> fruits.sort()
>>> fruits
['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']
>>> fruits.pop()
'pear'
------

NOTE: 方法 `insert` `reverse` 或者 `sort` 直接修改列表对象本身，没有返回值打印
。这些方法返回默认的 `None` 值。这个规则使用于 Python 所有可修改的数据结构。

=== stack

使用 `append` 和 `pop` 方法很容易实现 stack，并且效率很高。

=== queue

使用列表可以实现队列，但是由于每次往一个列表的第一个位置插入或者删除一个元素是
非常低效的（因为需要将后面的元素往前移动），Python 提供了deque 对象可以用来实
现队列。使用deque可以高效地在头尾插入或者删除数据项。

[source, python]
------
>>> from collections import deque
>>> queue = deque(["Eric", "John", "Michael"])
>>> queue.append("Terry")           # Terry arrives
>>> queue.append("Graham")          # Graham arrives
>>> queue.popleft()                 # The first to arrive now leaves
'Eric'
>>> queue.popleft()                 # The second to arrive now leaves
'John'
>>> queue                           # Remaining queue in order of arrival
deque(['Michael', 'Terry', 'Graham'])
------

=== List Comprehensions
List Comprehension 提供了一种简洁的方式创建满足某种条件的列表。

如创建包含0-9 九个数平方的列表，可以使用

[source, python]
------
squares = list(map(lamba x: x**2, rang(10)))
------

或者

[source, python]
------
squares = [x**2 for x in range(10)]
------

list comprehension 在语法上使用方括号界定一个表达式，这个表达式后面跟着一个
`for` 语句，然后是0或者多个 `for` or `if` 语句。其结果是在 `for` or `if` 上下
文的情况下评估表达式的结果组成的数据项。如果数据项是元组，必须使用括号括起来，
如下面的例子拼接两个列表

[source, python]
------
>>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
------

其等同于

[source, python]
------
>>> combs = []
>>> for x in [1,2,3]:
...     for y in [3,1,4]:
...         if x != y:
...             combs.append((x, y))
...
>>> combs
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
------

=== Nested List Comprehensions
list comprehension 的初始表达式可以是任何表达式，包括另一个 list
comprehension. 

[source, python]
------
>>> matrix = [
...     [1, 2, 3, 4],
...     [5, 6, 7, 8],
...     [9, 10, 11, 12],
... ]
------

下面的代码将对上面的矩阵进行转置操作

[source, python]
------
>>> [[row[i] for row in matrix] for i in range(4)]
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
------

其等同于

[source, python]
------
>>> transposed = []
>>> for i in range(4):
...     transposed.append([row[i] for row in matrix])
...
>>> transposed
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
------

再分解一下为

[source, python]
------
>>> transposed = []
>>> for i in range(4):
...     # the following 3 lines implement the nested listcomp
...     transposed_row = []
...     for row in matrix:
...         transposed_row.append(row[i])
...     transposed.append(transposed_row)
...
>>> transposed
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
------

NOTE: 我们应该尽可能使用内置函数做复杂的运算。 `zip` 函数对于上述运算提供了有
力的支持。

// /* Tuple {{{2 */
[[DataType_Tuple]]
== 元组（Tuple）
在Python语言中，一个元组是各类Python对象的集合，这些对象使用逗号进行分隔。
元组和列表很相似，它们都具有如下的特征：

* 它们都是有序的序列；
* 它们能够被索引和重复（repetition）；
* 允许嵌套
* 它们能够存放不同类型的值

=== 语法
一个元组使用（）进行界定，它的元素使用逗号进行分隔；

一个元组::
+
[source,python]
----
    # Defining a tuple without any element
    pure_tuple = ()
    print (pure_tuple)

    # Output- ()
----

// /* Exception {{{2 */
[[Exception]]
== 异常处理
Python 也如Java语言一样提供异常处理机制用于截获期望或者不期望的错误，然后对其
进行处理。

=== 语法
Python 使用如下形式的语法

[source, python]
------
try:
    # code
except [(Exception1, Exception2)] [as ex]: <1> <2> <3>
    # code
    raise [ex]      <4>
else: <5>
    # code
finally: <6>
    # code
------
<1> except 可以捕获一种或者多种异常，如果没有指定任何异常，形如 `except:` 讲捕
获所有类型的异常.
<2> 如果捕获两种或多种异常，需要使用（）将其扩起来并用逗号分隔. 这些异常可以分
成多个 `except` 语句单独处理。
<3> 可以使用 as 语句将其赋值一个变量，并在except 块中使用这个变量
<4> 在 except 块中可以 `raise` 语句抛出异常，如果没有参数，抛出被捕获的异常
<5> 可选择的，可以使用 `else` 语句定义没有发生错误时应该执行的操作
<6> 可选择的，可以使用 `finally` 语句定义无论是否发生异常都需要进行的操作。通
常时做清理工作。


// /* Tool for Python {{{2 */
== Python 工具集
这章主要介绍使用Python用的主要工具

[cols="1,4a,4a"]
.Python 工具集
|=====
| 用途  | 工具 | 实例

| Web应用
| Django, Flask, CherryPy and Bottle
| Plone (Content Management System), Zope application server, Quixote web
  framework and ERP5

| 科学和数字计算
| 模块 NumPy, SciPy, Pandas, matplotlib and IPython
| 

| GUI
| wxWidgets, pyqt and pyside
| Inkscape, Scribus, Paint Shop Pro and GIMP. 甚至3D软件如 3ds Max, Blender,
  Cinema 4D, Houdini and Maya

| 原型开发
| Pygame（多媒体库）
|

| 调试
| pdb，pudb，PyDebug
|

| IDE
| IDLE，默认的IDE，集成在Python包中；PyCharm，Eclipse with PyDev
|
|=====

=== IDLE
IDLE是纯python开发的集成开发环境, 它具有如下的功能

- 基于菜单的开发环境, 每个菜单选项有匹配的快捷键
- 基本的文本编辑功能
- code completion
- 语法检查
- 高亮显示
- 支持缩紧
- 支持调试

// /* Python 包管理工具 {{{2 */
== Python 包管理工具

=== PyPI 
PyPI 的全称是 Python Package Index, 是存放 Python 包的软件库，其网址请参见
<<1>> 。这个库中的软件包可以通过 pip python 命令进行安装，截至2017/12/14日，该
库中已经存放124246个软件包。

=== pip


[bibliography]
// /* 参考文献 {{{2 */
== 参考文献

- [[[1]]] https://pypi.python.org/pypi[Pypi -the Python Package Index]
- [[[2]]] https://docs.python.org/3/tutorial/index.html[The Python Tutorial]
- [[[3]]] https://docs.python.org/3/[Python 3 documentation]
- [[[4]]] https://docs.python.org/3/reference/index.html[The Python Language
  Reference]
- [[[5]]] https://www.techbeamers.com/python-tutorial-step-by-step[Python
  Tutorial - Learn Python Programming Step By Step]
