常用的Linux命令
==========
David Yon <davidyon@hotmail.com>
v1.0, 2017-06-15
:toc: right
:numbered:
:icons: font

本文列出常用的linux命令

== 终端（terminal）

=== setterm
设置terminal的属性，比如颜色，tab的宽度等等

=== stty
设置终端的各种模式, 比如

    stty -echo

该命令将不回显输入的字符. 在这种模式下, 用户不能看到自己输入的字符.

== 网络命令(network)

=== nc
创建TCP/UDP 连接。可以作为客户端与远端服务器连接，使用标准输入最为输入，
传给服务器端，并接受服务器端的返回，发送到标准输出

=== netstat
显示网络连接，路由表，接口统计等信息。

-----
# netstat -tulpn    <1>

Proto Recv-Q Send-Q Local Address           Foreign Address         State PID/Program name    
tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN 4747/cupsd          
tcp        0      0 0.0.0.0:23              0.0.0.0:*               LISTEN 1026/xinetd         
tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN 1248/exim4          
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN 580/rpcbind         
-----
<1> t 表示tcp；u 表示udp；l 表是正在监听的；p 建立该连接的进程号/程序名；n以数
字形式显示IP address和端口号


=== iperf/iperf3
测量网络带宽的程序. iperf3 是对 iperf 的重新实现, 并且不向前兼容. 使用起来特别
方便. 支持Linux, Windows 和 MacOS主要平台. 用法:

在一台机器作为server端执行如下:

    iperf3 -s 

在另一台机器上作为client端执行如下:

    iperf3 -c 172.16.1.50 -t 5

上面的IP地址是第一台作为服务器的机器的地址,  `-t 5` 表示执行5s


=== mount
mount 远程的SAMBA（CIFS）共享文件目录

[source,bash]
-----
mount -t cifs -o username=xxx,nounix,sec=ntlmssp //xxx.xxx.xxx.xxx/share mount_point
-----

== 管道命令

=== pv
监控数据在管道中的传输进度，例如大文件拷贝的速度

  pv file | nc -w 1 somewhere.com 3000

查看与somewhere.com的传输速度

== 文件编码命令(encode)

=== file
查看文件编码命令

可以使用``file —help``了解file的详细用法

=== iconv
转换指定文件的编码,

----
用法： iconv [选项...] [文件...]
  有如下选项可用:
  输入/输出格式规范：
  -f, --from-code=名称 原始文本编码
  -t, --to-code=名称 输出编码信息：
  -l, --list 列举所有已知的字符集
  输出控制：
  -c 从输出中忽略无效的字符
  -o, --output=FILE 输出文件
  -s, --silent 关闭警告
  --verbose 打印进度信息
  -?, --help 给出该系统求助列表
  --usage 给出简要的用法信息
  -V, --version 打印程序版本号
----

	iconv -f utf-8 -t gb2312 aaa.txt >bbb.txt +

这个命令读取aaa.txt文件，从utf-8编码转换为gb2312编码,其输出定向到bbb.txt文件。

=== convmv
文件名编码转换

	convmv -f GBK -t UTF-8 --notest *.mp3

=== enca
文件编码转换

	enca -L zh_CN ip.txt 查看当前编码 +
	enca -L 当前语言 -x 目标编码 文件名

=== hexdump

以用户指定的格式输出内容

=== expand
转换Tab为空格，比如

[source,bash]
------
cat testfile | expand -t 4
------

== 进程命令(process)

=== proc 目录
Linux将一个进程相关的信息放到根目录下的proc `/proc` 目录下。如对于进程号为1133
的进程，其相关的信息放在 `/proc/1133` 目录下文件中。其中

.进行信息
[cols="1m,5a"]
|====
| 文件名 | 解释和/或例子

| exe 
|存放与该进程对应的程序名

    # ls -l /proc/2266/exe
    lrwxrwxrwx 1 david david 0 Jan 25 16:38 /proc/2266/exe -> /usr/lib/telepathy/mission-control-5

| cwd
| 进程使用的当前目录。命令 `pwdx` 完成相同的功能。

    $ ls -l /proc/2620/cwd
    lrwxrwxrwx 1 david david 0 Jan 25 16:45 /proc/2620/cwd -> /home/david
|====
=== ps
这个命令在不同的操作系统选项会有所不同，Linux下的ps会做最大的兼容。

-w::
  输出的宽度增宽。如果使用两个w输出的宽度没有限制
w::
  同-w

- 使用标准语法显示系统中所有进程

    ps -e
    ps -ef
    ps -eF
    ps -ely

- 使用BSD语法显示系统中所有进程

    ps ax
    ps axu

- 打印进程树

    ps -ejH
    ps axjf

- 获取关于线程的信息

    ps -eLf
    ps axms

- 获取安全信息

    ps -eo euser,ruser,suser,fuser,f,comm,label
    ps axZ
    ps -eM

- 查看所有以root用户（real & effective ID）执行的进程

    ps -U root -u root u

- 使用用户定义的格式输出每个进程

    ps -eo pid,tid,class,rtprio,ni,pri,psr,pcpu,stat,wchan:14,comm
    ps axo stat,euid,ruid,tty,tpgid,sess,pgrp,ppid,pid,pcpu,comm
    ps -Ao pid,tt,user,fname,tmout,f,wchan

- 只打印 `syslogd` 进程的进程ID

    ps -C syslogd -o pid=

- 只打印进程号为42的命令名

    ps -q 42 -o comm=

=== fuser
查看使用某个文件或者套接字（socket）的进程

-----
# fuser 7000/tcp
    查找打开tcp端口7000的进程

# fuser -km /home
    关闭（kill）所有存取（access）文件系统 /home 的进程

# if fuser -s /dev/ttyS1; then :; else something; fi
    如果没有其它进程使用/dev/ttyS1，调用something

# fuser telnet/tcp
    显示所有监听在telnet端口的进程
-----

=== pwdx
查看某个进程的当前工作目录

----
$ pwdx 2620
2620: /home/david
----

== 安全（Security）

=== gpg
- 使用签名验证下载文件的完整性
  ** 格式：gpg --keyserver __server__ --verify __sig-file__
     __data-file__
  ** 说明：可以使用--keyserver选项指定公钥服务器的URI，
    __sig-file__是签名文件，
    __data-file__是下载的被验证的文件
- 打开调试信息
  ** 格式：gpg -vvv --debug-all
  ** 说明：打开所有层次调试信息

=== dirmngr
作为``gpg``,``gpgsm``,``gpg-connect-agent``命令的后端，与OpenPGP的keyserver
进行通信。

- 命令基本格式
+
----
dirmngr --debug-all <1>
        --daemon    <2>
        --standard-resolver <3>
----
<1> 参数``--debug-all``打开所有级别的调试信息
<2> 参数``--daemon``以后台服务的方式运行这个程序
<3> 参数``--standard-resolver``使用标准DNS解决方式

- 配置文件
  配置文件名称为__dirmngr.conf__，文件存放在``~/.gnupg/``目录下。
  这个命令的所有长参数均可以在这个文件中定义。如
+

----
  debug ipc,network,dns <1>
  log-file ~/logs/dirmngr.log <2>
  standard-resolver
----
<1> 设置那些模块打印调试信息
<2> 设置日志文件。如果这个程序出现问题，想自己研究一下，日志文件还是相当有用的。

=== gpg-connect-agent

=== openssl

Create a self signed certificate::
    (notice the addition of -x509 option)

    openssl req -config example-com.conf -new -x509 -sha256 -newkey \
      rsa:2048 -nodes -keyout example-com.key.pem -days 365 \
      -out example-com.cert.pem

Create a signing request:: 
    (notice the lack of -x509 option):

    openssl req -config example-com.conf -new -sha256 -newkey rsa:2048 -nodes \
     -keyout example-com.key.pem -days 365 -out example-com.req.pem

Print a self signed certificate::
    for example
    
    openssl x509 -in example-com.cert.pem -text -noout

Print a signing request::
    for example

    openssl req -in example-com.req.pem -text -noout

Create an OpenSSL config file::
    for example req.cnf which is used in -config option

    [req]
    distinguished_name = req_distinguished_name
    x509_extensions = v3_req
    prompt = no
    [req_distinguished_name]
    C = US
    ST = VA
    L = SomeCity
    O = MyCompany
    OU = MyDivision
    CN = www.company.com
    [v3_req]
    keyUsage = critical, digitalSignature, keyAgreement
    extendedKeyUsage = serverAuth
    subjectAltName = @alt_names
    [alt_names]
    DNS.1 = www.company.com
    DNS.2 = company.com
    DNS.3 = company.net

Then you can create the certificate with 

    openssl req -x509 -nodes -days 730 -newkey rsa:2048 \
     -keyout cert.key -out cert.pem -config req.cnf -sha256

Q&A::
https://stackoverflow.com/questions/10175812/how-to-create-a-self-signed-certificate-with-openssl[create
certificate]

https://stackoverflow.com/questions/8443081/how-are-ssl-certificate-server-names-resolved-can-i-add-alternative-names-using/8444863#[How
are SSL certificate server names resolved/Can I add alternative names using
keytool?]

https://crsr.net/Notes/SSL.html[ssl]

更多的用例参见<<3, OpenSSL Commands>>

=== keytool
关于keytool的详细用法请参见<<1,keytool>>。也可以参见<<2,Java Keytool
Commands>>

[[MultiMedia]]
== 多媒体

=== amixer

=== pactl

=== pacmd

=== ffmpeg
视频和音频转换程序

=== mediainfo
显示音频/视频文件的信息

== 磁盘
=== fdisk
分区工具

=== mount
挂载文件系统

=== du
统计目录及其子目录文件的总计大小

=== df
列举当前机器的设备以及使用情况

=== iostat
磁盘的读写速度

=== dd
设备或者文件之间拷贝

== 数学计算

=== bc
bc支持任意精度的数学计算语言，是个用起来很方便的数学计算工具。bc可以交互式使用，
也支持脚本输入。

bc 具有结构化程序设计语言可控制结构，可以定义变量，定义函数。提供常用的程序设计
语言结构，以及标准函数。


[bibliography]
== 参考文献

- [[[1]]]
  https://docs.oracle.com/javase/7/docs/technotes/tools/solaris/keytool.html[keytool]
- [[[2]]] https://www.sslsupportdesk.com/java-keytool-commands/[Java Keytool
  Commands]
- [[[3]]] https://www.sslsupportdesk.com/openssl-commands/[OpenSSL Commands]
