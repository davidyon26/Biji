// /* ANSI escape sequences code {{{2 */
= ANSI escape sequences
David Yon <davidyon@hotmail.com>
v1.0, 2018-01-04
:toc: right
:numbered:
:icons: font
:source-highlighter: highlightjs
:highlightjsdir: highlight
:experimental:

// /* Introduction {{{2 */
== 简介
ANSI escape sequences 是一个用于在文本视频终端下控制字符显示的标准。这些字符和
其它普通字符一起发送给终端，由终端根据字符串中控制字符（ANSI escape code）决定
字符的显示方式。这些控制字符是一系列字节流，通常以ESC 和 `[` 开始作为 escape
code的标识。

// /* 历史 {{{2 */
== 历史
几乎所有的视频终端厂商都会增加一些厂商相关的escape sequence控制字符串去进行某
些操作，如控制光标所在的位置。比如在VT52终端允许通过发送转移序列字符（
escape sequence）控制光标显示在屏幕的任何位置（以x,y坐标系）。而不同的厂商使用
不同的转移序列，这样会给操作系统或者软件带来兼容性的问题。

因此标准化组织开始对其进行标准化，以便简化软件的实现。

最近是ECMA-48, 它已经升级了几次，最新的是1991年的第五版，它也被ISO和IEC组织采
纳为 ISO/IEC 6429.

// /* 平台支持 {{{2 */
== 平台支持
到1980年中期，转义序列在广泛的平台上得到支持。虽然越来越多的操作系统在文本终端
支持转义序列，但是在通常情况下，它更多使用在终端模拟器（terminal emulator）上
。比如Unix上的xterm，OS X上的Terminal或者MacOS上的ZTerm，以及IBM PC上的通讯程
序。

Unix和AmigaOS支持ANSI，这导致运行在这些操作系统的程序的广泛使用ANSI。在Unix-like
操作系统上，许多软件能够通过诸如termcap和curses库产生ANSI控制字符去更新文本在
终端上的显示。虽然这些库被设计为也支持非ANSI终端，但是几乎没有被测试。许多游戏
和shell脚本可能会直接输出ANSI序列，但是这些脚步不能工作在不解释ANSI序列的终端
上。

MS-DOS 1.x 不支持ANSI或者其它escape sequences。仅仅在BIOS层面上支持几个控制字符（如BEL，CR
，LF，BS），使得其几乎不能实现全屏的应用。

MS-DOS 2.0增加了设备驱动程序支持ANSL escape sequences - 事实上的标准就是
ANSI.SYS，但也使用诸如ANSI.COM, NANSI.SYS and ANSIPLUS.EXE。但是由于速度慢并且
默认情况不安装，它们没有得到广泛支持。

Win32 console根本不支持ANSI escape sequences。一些其他的cosole窗口程序，如JP
Software的TCC，Michael J. Mefford的ANSI.COM，Jason Hood的ANSICON和Maximus的
ConEmu可以解释程序打印的ANSI escape sequences。有一个Python的包能够解释被打印
的正文中的ANSE escape sequence，并对其进行转换从而可以用于显示颜色和光标位置。

在2016年，微软Windows 10的Threshod 2意外地在console应用中支持ANSI escape
sequence，这使得移植Unix软件或者远程访问Unix系统更加容易。

// /* Escape sequence {{{2 */
== Escape sequences



// /* 参考文献 {{{2 */
[bibliography]
== 参考文献
- [[[1]]] https://en.wikipedia.org/wiki/ANSI_escape_code[ANSI escape code
  wikipedia]
- [[[2]]]
  http://www.ecma-international.org/publications/standards/Ecma-048.htm[
  Standard ECMA-48 Control Functions for Coded Character Sets]
- [[[3]]] https://www.iso.org/standard/12782.html[ISO/IEC 6429:1992
  Information technology - Control functions for coded character sets]
- [[[4]]]
  https://stackoverflow.com/questions/6520116/java-framework-for-reading-writing-ansi-escape-sequenced-character-streams[
  Java for reading ANSI escape-sequence character streams]
- [[[5]]]
  https://github.com/fusesource/jansi/tree/master/jansi/src/main/java/org/fusesource/jansi[jansi]
- [[[6]]] http://invisible-island.net/xterm/ctlseqs/ctlseqs.html[XTerm Control
  Sequences]
