// /* grpc {{{2 */
= gRPC
David Yon <davidyon@hotmail.com>
v1.0, 2017-12-14
:toc: right
:numbered:
:icons: font
:source-highlighter: highlightjs
:highlightjsdir: highlight

[[Overview]]
== 概述
gRPC 是由 google 最先设计实现的开源 RPC 系统。它使用 HTTP/2 作为传输层，
Protocol Buffer 作为其接口定义语言。它提供了很多功能模块，比如授权，双向的流传
输，流控制（flow control），阻塞和非阻塞的绑定，取消，超时等。它可以产生跨平台
的多种语言的客户端和服务器端的代码。

关于HTTP/2, 可以参见 <<RFC7540, HTTP/2>> 。 HTTP2的传输层可以基于TCP进行明文传
输，也可以基于TLS进行安全加密传输。关于TLS可以参见 <<RFC5246,The Transport
Layer Security (TLS) Protocol Version 1.2>>。然而HTTP/2是基于ALPN --- TLS协议
的扩充，关于ALPN参见 <<RFC7301,Transport Layer Security (TLS)
Application-Layer Protocol Negotiation Extension>>。这个扩充可以在TLS握手期间
进行应用层协议的选择，从而避免为该选择进行的多次网络交互。关于网络传输层的安全
性可以参见 <<W1,Transport Layer Security>>。

=== 体系结构
与很多RPC系统一样，gRPC基于如下的思想：定义一个服务（service），该服务定义了能
够被远端客户段调用的方法，以及参数和返回类型。在服务器端，服务器（server）软件
实现了这个接口，启动服务器可以响应客户端的对该接口的调用；在客户端，客户端有个
stub，它提供了与服务器端相同的方法。

.gRPC的体系结构
[caption="Figure 1-1 "]
image::image/grpc/architecture.svg[gRPC 体系结构]

gRPC的客户端和服务端可以部署在各种环境下进行交互。能够使用多种 gRPC 支持语言进
行实现。比如，你可以使用Java语言实现服务器端软件，而使用Go，Python或者Ruby实现
客户端。另外最新的 Google API 架构提供了 gRPC 版本的接口，这样方便开发人员容易
在它们的应用中构建Google提供的功能。

=== Protocol Buffers
默认情况下，gRPC使用
https://developers.google.com/protocol-buffers/docs/overview[protocol
buffers]。这是一种比较成熟的序列化结构数据的机制。当然 gRPC 也可以使用其它数据
格式，如JSON。

要使用 `protocol buffer`, 首先使用它定义你希望传输而序列化的数据结构，这个结构
定义到一个扩展名为 .proto 的文件中。Protocol Buffer 将数据格式为 `message` 。
每个 `message` 包含一系列 名-值 对，这些名值对被成为 `fields` 。下面是个列子

[source, proto]
------
message Person {
    string name = 1;
    int32 id = 2;
    bool has_ponycopter = 3;
------

这个数据结构一旦被定义，你可以使用 `protocol buffer` 编译器 protoc 将你定义的
proto 文件转化为某种你选定语言的数据结构。通常生成的代码提供了每个 `field` 的
accessors （也就是name() and set_name()），以及这个数据结构转化为byte流或反向
的转换方法。例如如果你选择的语言是C+\+，运行上面的编译器将会产生C++ 的类
Person。你可以使用这个类存取，序列化Person protocol buffer message数据。

定义完要传输的数据结构后，可以使用普通的 proto 文件定义 gRPC 服务（service）。
如下面是定义了 service 的细化版本。

[source, proto]
----
// The greeter service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}
----

你可以使用 `protoc` 已经特定语言的 gRPC 插件从 `proto` 文件生成特定语言的代码
。使用特定语言的插件，不仅能够产生客户端和服务端的代码，同时也会产生正规的
`protocl buffer` 代码用于 populating, serializing and retrieving 交互的message
。

=== Protocol buffer version
当前的 `Protocol buffer` 的版本是 proto3，相对于其前期的版本 proto2，它具有更
简单的语法，增加了一些有用的功能，支持更多的语言。当前支持的语言是 Java, C+\+,
Python, Objective-C, C#, a lite-runtime(Android Java), Ruby,
https://github.com/google/protobuf/releases[JavaScript],
https://github.com/golang/protobuf[Go], 更多的语言正在开发中。

更多的信息，请参考
https://developers.google.com/protocol-buffers/docs/proto3[proto3 language
guide] 和
https://developers.google.com/protocol-buffers/docs/reference/overview[
reference documentation]. 参考手册也包括了 `.proto`
https://developers.google.com/protocol-buffers/docs/reference/proto3-spec[文件
格式的规约]。

== Authentication
关于安全性请参考<<2,grpc authentication>>

== Java
关于Java的简单帮助文件见官网的 

- <<3, GRPC Java QuickStart>>, 
- <<4, GRPC Java Basics>>, 
- <<5, Java Authentication>>, 
- <<6, How to authentication on client>>
- <<9, Grpc Java SSL mutual authentication>>

以及host name 不匹配的解决方法

- <<7, 方法1>>, 
- <<8, 方法2>>

== Python
一个简单的帮助文件参见 https://grpc.io/docs/quickstart/python.html[QuickStart
Python]

[bibliography]
== 参考文献

- [[[1]]] https://grpc.io/docs/[grpc documentation]
- [[[2]]] https://grpc.io/docs/guides/auth.html[grpc authentication]
- [[[3]]] https://grpc.io/docs/quickstart/java.html[grpc java quick start]
- [[[4]]] https://grpc.io/docs/tutorials/basic/java.html[grpc java basic]
- [[[5]]] https://github.com/grpc/grpc-java/blob/master/SECURITY.md[grpc java
  authentication]
- [[[6]]]
  https://stackoverflow.com/questions/47628276/grpc-how-to-configure-ssl-in-client[how
  to configure ssl in client in grpc java]
- [[[7]]] https://www.ibm.com/support/knowledgecenter/SS9J9E/ioc/ts_liberty_ip.html[No
  subject alternative names present 1]
- [[[8]]] 
  https://stackoverflow.com/questions/19540289/how-to-fix-the-java-security-cert-certificateexception-no-subject-alternative[No
  subject alternative names present 2]
- [[[9]]]
  https://stackoverflow.com/questions/32222389/grpc-java-ssl-mutual-authentication[Grpc
  Java SSL mutual authentication]
- [[[W1]]] https://en.wikipedia.org/wiki/Transport_Layer_Security[Transport
   Layer Security]
- [[[RFC7540]]] https://tools.ietf.org/html/rfc7540[RFC7540 HTTP/2]
- [[[RFC5246]]] https://tools.ietf.org/html/rfc5246[The Transport Layer
  Security (TLS) Protocol Version 1.2]
- [[[RFC7301]]] https://tools.ietf.org/html/rfc7301[Transport Layer Security
  (TLS) Application-Layer Protocol Negotiation Extension]

