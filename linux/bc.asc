bc 参考手册
=======
David Yon <davidyon@hotmail.com>
v1.0, 2017-06-15
:toc: right
:numbered:
:icons: font

*bc* 是用于科学计算的程序设计语言，可以进行任何精度的计算。可以交互式使用，
也可以使用读取脚本文件。

== 用法

  bc [ -hlwsqv ] [long-options] [ file ...]

*bc* 的语法与 *C* 语言类似。如果 `-l` 选项被指定，它首先装入数学库。然后
按顺序处理执行所有命令行指定的脚本文件，当所有脚本文件执行完成，*bc* 从标准
输入读取命令，当遇到 *halt* 命令，*bc* 会退出，不进行后续的任何处理。

这里最主要的选项是-l选项

-l, --mathlib::
  定义标准的数学库

== 数

*bc* 支持任何精度，精度包括整数部分和小数部分。数存在两个属性：

- length：一个十进制数包含的数字的个数
- scale：小数点后面数字的个数

    .000001 的长度为6，scale是6
    1935.000 的长度为7，scale是3

== 变量
*bc* 有两种变量存放数 -- 简单变量和数组。变量具有名，名由小写字母开始，后面可以
包含任意多字母，数字或者下划线，可以形式定义为：

    [a-z]{a-z0-9_}*

数组变量名后面包括方括号 []

*bc* 预定义了四个特殊的变量，可以对这些变量进行赋值和使用。

scale::
    scale用于规定在运算中应该保留的小数部分数字的个数。默认值为0,即不保留小数
    部分
ibase::
    ibase定义输入数据的记数方式，有效范围为2-16,分别代表2-16进制的数。默认值是
    10    
obase::
    定义了数已什么进制输出，见ibase。默认值是10
last::
    最后被打印的数。当某个数是复杂计算的结果，使用 `last` 可以避免重新输入表达
    式。有些实现可以使用点号（.）代替这个变量。也可以对这个变量重新赋值。

== 注释

- 使用 *C* 语言的 `/* ... */` 作为注释，注释可以包括多行，可以出现在任何位置。

- 作为扩充，支持单行注释，单行注释以井号（#）作为标识，一直到行末。换行符不
  作为注释的一部分

== 表达式

*bc* 支持：

=== 算数运算

.算数运算
[cols="1m,3"]
|===
| 表达式 | 含义

| - expr |
| ++ var |
| -- var |
| var ++ |
| var -- |
| expr + expr |
| expr - expr |
| expr * expr |
| expr / expr |
| expr % expr |
| expr ^ expr |
| ( expr )    |
| var = expr  |
| var <op>= expr |
|===

=== 关系运算
关系运算的值为0或者1。0表示false，1表示true。

NOTE: POSIX bc 需要关系运算只能用于if, while, for等用于关系检测的语句中。

.关系运算
[cols="1m,3"]
|===
| 表达式 | 说明

| expr1 < expr2  |
| expr1 <= expr2 |
| expr1 > expr2  |
| expr1 >= expr2 |
| expr1 == expr2 |
| expr1 != expr2 |
|===

=== 逻辑运算
逻辑运算的值为0或者1。0表示false，1表示true。

NOTE: POSIX bc 不支持逻辑运算

.逻辑运算 
[cols="1m,3"]
|===
| 表达式 | 说明

| !expr  |
| expr1 && expr2 |
| expr1 || expr2 |
|===

=== 运算优先级

.运算优先级（从低到高）
[cols="1m,3"]
|===
| 操作符 | 说明

| \|\| | 左结合
| && |   左结合
| !  |   
| 关系运算符 | 左结合
| 赋值运算符 | 右结合
| + - 加减   | 左结合
| * / %      | 左结合
| ^          | 右结合
| - 取反     |
| ++  --     |
|===

NOTE: 这个优先级定义是为了保持与POSIX兼容，但是对于赋值运算优先与关系和逻辑
      运算，这点与通常程序设计语言不同。如 `a = 3 < 5` 通常会计算 `3<5` 然后
      将结果赋值给a。但是在 *bc* 中，先赋值3给a, 然后计算 `3<5`

=== 函数调用

和常量一样，函数调用也是表达式，能够参与上面的运算。*bc* 提供了内建的标准函数。
用户也可以定义自己的函数，关于函数定义参见<<function,函数>>。函数调用的语法为

  function_name(parameters)

*bc* 提供了如下标准函数

.标准函数
[cols="1m,3"]
|===
| 函数型构 | 说明

| length ( expr )
| `expr` 值的长度

| read ( )
| 从标准输入接受用户的输入的数。数的进制由 *ibase* 当前的值决定。

| scale ( expr )
| `expr` 值小数部分数字的个数

| sqrt ( expr )
| `expr` 值的平方根。如果 `expr` 是负数，产生运行错误。
|===

[statement]
== 语句
*bc* 脚本由一系列通过分号（;）或者换行符分隔的语句组成。包括如下类型的语句：

表达式（expression）::
  赋值表达式对变量进行赋值，不输出任何数字；非赋值表达式将在标准输出中打印表示
  式的结果,然后再打印一个换行符。例如 `a=1` 是个赋值表达式，而 `(a=1)` 则不是
  赋值表达式，它会输出数在标准输出。 +
  数的输出格式由 `obase` 决定，它的取值范围


[function]
== 函数

