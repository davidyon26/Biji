bc 参考手册
=======
David Yon <davidyon@hotmail.com>
v1.0, 2017-06-15
:toc: right
:numbered:
:icons: font
:source-highlighter: highlightjs
:highlightjsdir: highlight
:experimental:

*bc* 是用于科学计算的程序设计语言，可以进行任何精度的计算。可以交互式使用，
也可以使用读取脚本文件。

== 用法

  bc [ -hlwsqv ] [long-options] [ file ...]

*bc* 的语法与 *C* 语言类似。如果 `-l` 选项被指定，它首先装入数学库。然后
按顺序处理执行所有命令行指定的脚本文件，当所有脚本文件执行完成，*bc* 从标准
输入读取命令，当遇到 *halt* 命令，*bc* 会退出，不进行后续的任何处理。

这里最主要的选项是-l选项

-l, --mathlib::
  定义标准的数学库

== 数

*bc* 支持任何精度，精度包括整数部分和小数部分。数存在两个属性：

- length：一个十进制数包含的数字的个数
- scale：小数点后面数字的个数

    .000001 的长度为6，scale是6
    1935.000 的长度为7，scale是3

== 变量
*bc* 有两种变量存放数 -- 简单变量和数组。变量具有名，名由小写字母开始，后面可以
包含任意多字母，数字或者下划线，可以形式定义为：

    [a-z]{a-z0-9_}*

数组变量名后面包括方括号 []

*bc* 预定义了四个特殊的变量，可以对这些变量进行赋值和使用。

scale::
    scale用于规定在运算中应该保留的小数部分数字的个数。默认值为0,即不保留小数
    部分
ibase::
    ibase定义输入数据的记数方式，有效范围为2-16,分别代表2-16进制的数。默认值是
    10    
obase::
    定义了数已什么进制输出，见ibase。默认值是10
last::
    最后被打印的数。当某个数是复杂计算的结果，使用 `last` 可以避免重新输入表达
    式。有些实现可以使用点号（.）代替这个变量。也可以对这个变量重新赋值。

== 注释

- 使用 *C* 语言的 `/* ... */` 作为注释，注释可以包括多行，可以出现在任何位置。

- 作为扩充，支持单行注释，单行注释以井号（#）作为标识，一直到行末。换行符不
  作为注释的一部分

== 表达式

*bc* 支持：

=== 算数运算

.算数运算
[cols="1m,3"]
|===
| 表达式 | 含义

| - expr |
| ++ var |
| -- var |
| var ++ |
| var -- |
| expr + expr |
| expr - expr |
| expr * expr |
| expr / expr |
| expr % expr |
| expr ^ expr |
| ( expr )    |
| var = expr  |
| var <op>= expr |
|===

=== 关系运算
关系运算的值为0或者1。0表示false，1表示true。

NOTE: POSIX bc 需要关系运算只能用于if, while, for等用于关系检测的语句中。

.关系运算
[cols="1m,3"]
|===
| 表达式 | 说明

| expr1 < expr2  |
| expr1 <= expr2 |
| expr1 > expr2  |
| expr1 >= expr2 |
| expr1 == expr2 |
| expr1 != expr2 |
|===

=== 逻辑运算
逻辑运算的值为0或者1。0表示false，1表示true。

NOTE: POSIX bc 不支持逻辑运算

.逻辑运算 
[cols="1m,3"]
|===
| 表达式 | 说明

| !expr  |
| expr1 && expr2 |
| expr1 || expr2 |
|===

=== 运算优先级

.运算优先级（从低到高）
[cols="1m,3"]
|===
| 操作符 | 说明

| \|\| | 左结合
| && |   左结合
| !  |   
| 关系运算符 | 左结合
| 赋值运算符 | 右结合
| + - 加减   | 左结合
| * / %      | 左结合
| ^          | 右结合
| - 取反     |
| ++  --     |
|===

NOTE: 这个优先级定义是为了保持与POSIX兼容，但是对于赋值运算优先与关系和逻辑
      运算，这点与通常程序设计语言不同。如 `a = 3 < 5` 通常会计算 `3<5` 然后
      将结果赋值给a。但是在 *bc* 中，先赋值3给a, 然后计算 `3<5`

=== 函数调用

和常量一样，函数调用也是表达式，能够参与上面的运算。*bc* 提供了内建的标准函数。
用户也可以定义自己的函数，关于函数定义参见<<function,函数>>。函数调用的语法为

  function_name(parameters)

*bc* 提供了如下标准函数

.标准函数
[cols="1m,3"]
|===
| 函数型构 | 说明

| length ( expr )
| `expr` 值的长度

| read ( )
| 从标准输入接受用户的输入的数。数的进制由 *ibase* 当前的值决定。

| scale ( expr )
| `expr` 值小数部分数字的个数

| sqrt ( expr )
| `expr` 值的平方根。如果 `expr` 是负数，产生运行错误。
|===

[statement]
== 语句
*bc* 脚本由一系列通过分号（;）或者换行符分隔的语句组成。包括如下类型的语句：

表达式（expression）::
  赋值表达式对变量进行赋值，不输出任何数字；非赋值表达式将在标准输出中打印表示
  式的结果,然后再打印一个换行符。例如 `a=1` 是个赋值表达式，而 `(a=1)` 则不是
  赋值表达式，它会输出数在标准输出。 +
  数的输出格式由 `obase` 决定，它的取值范围2至 `BC_BASE_MAX` 参见<<limits,
  限制>>。对于2-16进制数，正常的显示格式。对于进位制超过16的，使用多字符显示的
  方式，一个单位的多字符是一个0至 `obase`-1 的十进制。多个单位之间使用空格分开。  例如，如果 obase=20 （20进制）的表示方式，21 将会输出为 `01 01`。

字符串::
  字符串是由双引号界定的一串字符，两个双引号之间的内容都具有字面含义。字符串输出
  字符字面的值，并且后面没有换行符号。

print list::
   print语句（扩充功能）提供了另一种输出。_list_是由逗号分隔的字符串或者表达式。   字符串和表达式按输入的顺序执行并输出。表达式的值自动赋值给 `last` 变量。字符
   串可以包含特殊字符。特殊字符使用 `\` 进行转译。 +
   能够被 *bc* 识别的特殊字符为：`a` （alert或bell）， `b`（backspace）， `f`
   （form feed）, `n`（newline）, `r`（carriage return）, `q`（double quote）,
   `t`（tab）和 `\` （backslash）。任何其它使用 `\` 进行转译的字符将被忽略。

{ statement_list }::
  这是一种符合语句，用于将一组语句最为一组一起执行。

if ( expr ) statement1 [else statement2]::
  if 语句首先评估表达式 _expr_，如果表达式值非0, 执行语句 _statement1_ ，否者执
  行语句 _statement2_。Note: else语句部分是扩充。
while ( expr ) statement::
  while 语句循环评估 _expr_, 如果表达式值非0，执行语句 _statement_。如果表达式值
  为0或者执行 `break` 语句，退出循环。
for ( [expr1] ; [expr2] ; [expr3] ) statement::
  for 语句循环执行 __statement_ 直到 _expr2_ 为0。_expr1_ 在循环之前评估，
  _expr2_ 在每次循环之前评估；_expr3_ 在每次执行完 _statement_之后且在评估
  _expr2_ 之前执行。如果 _expr2_ 不存在，相当于它的值为1。前述 for 语句相当
  与下面的 while 语句： +
  expr1; +
  while (expr2) { +
    statement; +
    expr3; +
  }
break::
  break 语句强迫退出当前层的 for 或者 while 循环。
continue::
  coninue 语句忽略后续语句直接进入下一次的循环。
halt::
  halt 语句的执行将导致bc程序推出。
return::
  在函数中执行 return 语句返回值0
return ( expr )::
  在函数中执行返回 _expr_ 的值

limits::
  输出本版 *bc* 执行<<limit,约束>>。
quit::
  导致终止 *bc* 程序的执行。不同与 `halt` ,它在编译时刻执行。例如 +
  ` if (0 == 1) quit ` +
  将导致bc程序退出。
warranty::
  打印详细的warranty提示。（扩充）

[function]
== 函数
*bc* 中的函数总是计算一个值，并将其返回给调用者。函数的定义形式为：

    define name ( parameters ) { newline
       auto_list statement_list }

`define` 关键字，_name_ 是函数名。函数调用是 `name(parameters)` 形式的表达式

parameters使用逗号分隔的参数，参数可以是数组，其形式为 `name[]`, 参数通过值进行
传递； _auto_list_是可选的本地变量。其格式为 "*auto* _name,...;" 后面的分号是可
选的。auto 变量的使用与传统语言不同，如果函数A调用函数B，B可以存取A中的auto变量
。这是因为auto变量是被压栈的。

*bc* 支持递归函数。

[limit]
== 约束（limits）
 
