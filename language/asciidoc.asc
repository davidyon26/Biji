= AsciiDoc Guide
Dvly Yon <dvlyyon@github.com>
v1.0, 2017-06-15
:toc:
:numbered:

[[Document-structure]]
== 文章结构定义
从结构上来看，一篇文章通常包括多个章节（section）。文章和每个章节通常都有标题用于分别概要文章和每个章节的内容。

=== 文章头（Document Header）
一篇文章除了具有一个文章标题（Document title）以外，通常还有其他文章属性（Document attribute），如作者，作者联系方式，版本，完成日期等。文章标题和文章属性信息组成了文章头，文章头是可选的

==== 文章标题（Document Title）
文章的标题定义很简单，它以等号（=）开始，后面至少包括一个空格，然后紧跟文章标题。如本文的标题定义如下
```
= AsciiDoc Guide
```
==== 文章属性（Document attribute）
文章属性是AsciiDoc区别于其他标签语言的主要特征。文章属性主要具有如下三个目的：

* 描述文章的基本信息：如作者、版本、创作时间等。这些属性当转换成完整的一篇文章或者一部书时会由AsciiDoc处理器特殊处理；

  = AsciiDoc Guide
  Dvly Yon <dvlyyon@github.com>
  v1.0, 2017-06-15

* 定义一些变量值，这些变量值在文章的后续章节中可以通过变量名被引用。在语法上，定义变量时，变量名冒号括起来（:变量名:），而在引用的时使用花括号（{变量名}）。通常在写一篇文章时不断重复一段话，这时建议你使用属性定义

  = AsciiDoc Guide
  :reference1: http://asciidoctor.org/docs/asciidoc-writers-guide/
  ...
  参考文献1：{reference1}

* 预定义的变量：这些变量由AsciiDoc处理器使用完成特定的功能，如果:toc:用于生成文章目录结构，:linkcss!:后面一个感叹号用于取消linkcss的定义等等。

  = AsciiDoc Guide
  Dvly Yon <dvlyyon@github.com>
  v1.0, 2017-06-15
  :toc:

[TIP]
====
* 文章头是可选的，如果存在，必须首先定义文章标题
* 文章头可以定义一个或者多个属性行，每个属性行定义一个属性。
* 文章头和文章其他部分必须使用一个或者多个空行分隔；并且文章头内部不能存在空行
====

=== 章节（section）
章节由章节标题和多个章节内容组成。章节可以嵌套，包含其他章节，从而组成层次式的结构。章节的标题定义同样使用等号（=），它是由2个到6个等号标识，等号的数目表明了章节的嵌套层次。

  = Document Title (Level 0)
  == Level 1 Section
  === Level 2 Section
  ==== Level 3 Section
  ===== Level 4 Section
  ====== Level 5 Section
  == Another Level 1 Section

[TIP]
====
* 如果doctype属性被设置成book，可以包括多个0级别的标题，否则（默认的article)只能存在一个0级别的标题
* 章节的层次必须连续的，不能跳过某个层次
* 标题的标识符号可以使用井号（#），这样AsciiDoc可以很好的处理Markdown的文档结构
* 可以使用:numbered:文档属性对文档章节自动编号
====

### 前言（preamble）
通常一本书在书名（Document title）和第一章节之间会存在序言，致谢等等部分。这部分英文为preamble。这部分可以有多个段落，AsciiDoc会使用特殊的方式对其进行处理，如果不存在书名或者文章名，这部分将不作为前言处理。

## 章节内容（Section Body）结构构定义
如前所述<<Document-structure,文章结构定义>>，章节（Section）由标题和章节内容组成，并且可以包含其他下级章节。前面已经描述了章节层次和标题的定义。本章主要介绍章节内容的结构。章节内容可以包含多个块（Block）

每个块可以有个可选的块标题，块可以是段落（Paragraph),分隔块（DelimitedBlock），列表，表格或者宏定义块。
可选的块标题使用点号（.）标示，后面紧跟着块标题，如

  .出门检查项
  - 关闭门窗
  - 关闭电源
  - 关闭水、燃气开关

显示的结果如下

.出门检查项
- 关闭门窗
- 关闭电源
- 关闭水、燃气开关

== 段落（Paragraph)
段落是一段正文，这段正文以一个空行或者EOF（end of file）结束，或者后面紧接着分隔块或者列表。可以使用三种语法（syntax）定义段落，并可以赋予段落不同的风格（style）。三种语法是正常式（normal），字面式（literal）和警示式（admonition）。风格（style）是用于指示AsciiDoc处理器如何处理下面的段落。每种语法的段落隐含了默认的风格。AsciiDoc内置的风格包括：normal，literal，verse，quote，listing，TIP，NOTE，IMPORTANT，WARNING，CAUTION,abstract,partintro,comment,example,sidebar,source,music,latex,graphivz。

=== 正常式（normal）段落
正常段落包括一行或多行不包括空行的正文，正常段落的第一行的起始字符不能是空白字符。正常式段落具有默认的normal风格。

=== 字面式（literal）段落
字面式段落也称为缩进式（indented）段落，因为段落的一行需要使用一个或者多个空格或者tab字符进行缩进。字面式段落使用等宽（monospaced）字体进行渲染，没有用于区分的背景和边界。并且在默认情况下，除了特殊字符（Special Characters）和Callouts意外，不对段落中的格式化或者替换的标签进行处理。字面式段落具有默认的literal风格。下面定义了字面式段落，表示标题的等号（=）字符保持字面值，不被特殊处理。

  Consul *necessitatibus* per id,
  consetetur, eu pro everti postulant
  homero verear ea mea, qui.

可以不使用缩进，而使用literal风格，明确说明下面的段落使用字面式段落，风格的定义是使用方括号，如[literal]

  [literal]
  Consul *necessitatibus* per id,
  consetetur, eu pro everti postulant
  homero verear ea mea, qui.

=== 援引（quote）和诗歌（verse）风格段落
这两中风格的定义可以包括两个可选的属性（attribute）：归属者（attribution）和引用标题

* 诗歌风格
诗歌风格保留换行符号，比如下面的一段

  [verse, William Blake, from Auguries of Innocence]
  To see a world in a grain of sand,
  And a heaven in a wild flower,
  Hold infinity in the palm of your hand,
  And eternity in an hour.

输出格式为：

[verse, William Blake, from Auguries of Innocence]
To see a world in a grain of sand,
And a heaven in a wild flower,
Hold infinity in the palm of your hand,
And eternity in an hour.

* 援引风格
援引风格不保留换行符号，援引的属性右对齐

  [quote, Bertrand Russell, The World of Mathematics (1956)]
  A good notation has subtlety and suggestiveness which at times makes
  it almost seem like a live teacher.

输出格式为：

[quote, Bertrand Russell, The World of Mathematics (1956)]
A good notation has subtlety and suggestiveness which at times makes
it almost seem like a live teacher.

=== 警示式（admonition)段落
警示式段落包括提示（TIP），关注（NOTE)，重要（IMPORTANT），警告（WARNING)和注意（CAUTION)。它们分别使用TIP:，NOTE:，IMPORTANT:，WARNING:和CAUTION:作为警示段落第一行的第一个单词。
它们分别对应同名的风格，使用风格可以得到同样的效果。比如

  TIP: This is an example note.
  或者
  [TIP]
  This is an example note.

输出为：

TIP: This is an example note.

NOTE: 警示段落的风格是可以配置的，可以使用icon, icons, iconsdir 和 caption属性进行调整

  [icons=None, caption="My Special Note"]
  NOTE: This is my special note.

== 分隔块（Delimited Blocks）
分隔块是上下分隔行封装的一块正文。分隔行由4个以上相同的分隔字符组成。分隔块类似于段落的风格，它指示了如何对分隔块中的文字进行渲染。AsciiDoc提供了下面几种预设的分隔块。

  CommentBlock:     //////////////////////////
  PassthroughBlock: ++++++++++++++++++++++++++
  ListingBlock:     --------------------------
  LiteralBlock:     ..........................
  SidebarBlock:     **************************
  QuoteBlock:       __________________________
  ExampleBlock:     ==========================
  OpenBlock:        --

.预定义分隔块定义
[cols="1e,1,5a",frame="topbot",options="header"]
|====================================================================
| | 分隔符 |应用场景

|PassthroughBlock | ++++ | 正文不进行任何转换直接原样输出
|ListingBlock     | ---- | 用于显示源代码，输入和屏幕输出
|LiteralBlock     | .... | 显示与输入相同
|SidebarBlock     | **** | 与文档正文并列显示
|QuoteBlock       | ____ | 用于引用或者诗歌，可带用参数
|ExampleBlock     | ==== | 用于举例
|OpenBlock        | --   | 比较特殊，只需要两个连线
|CommentBlock     | //// | 私有的注释，不被渲染显示
|====================================================================

.预定义分隔块对不同元素处理方式
[cols="2e,7*^",frame="topbot",options="header,autowidth"]
|=====================================================
| |Attributes |Callouts |Macros | Quotes |Replacements
|Special chars |Special words

|PassthroughBlock |Yes |No  |Yes |No  |No  |No  |No
|ListingBlock     |No  |Yes |No  |No  |No  |Yes |No
|LiteralBlock     |No  |Yes |No  |No  |No  |Yes |No
|SidebarBlock     |Yes |No  |Yes |Yes |Yes |Yes |Yes
|QuoteBlock       |Yes |No  |Yes |Yes |Yes |Yes |Yes
|ExampleBlock     |Yes |No  |Yes |Yes |Yes |Yes |Yes
|OpenBlock        |Yes |No  |Yes |Yes |Yes |Yes |Yes
|=====================================================

=== Listing Blocks
ListingBlocks使用等宽字体进行渲染，通常有区别于其他部分的背景和边框。不进行正文格式和替换的转换，支持特殊字符和Callouts。主要用于源代码，计算机输出，文件列表等

....
  --------------------------------------
  #include <stdio.h>

  int main() {
     printf("Hello World!\n");
     exit(0);
  }
  --------------------------------------
....

输出格式为

--------------------------------------
#include <stdio.h>

int main() {
   printf("Hello World!\n");
   exit(0);
}
--------------------------------------

=== Literal Blocks
LiteralBlock的显示格式与字面式段落相同
----
...................................
Consul *necessitatibus* per id,
consetetur, eu pro everti postulant
homero verear ea mea, qui.
...................................
----

显示格式为：

...................................
Consul *necessitatibus* per id,
consetetur, eu pro everti postulant
homero verear ea mea, qui.
...................................

=== Siderbar Blocks
SidebarBlock是一段文字偏离于文章的正文，通常这段正文被渲染为加上边框，从而指示其与正文不同。

---------------------------------------------------------------------
.An Example Sidebar
************************************************
Any AsciiDoc SectionBody element (apart from
SidebarBlocks) can be placed inside a sidebar.
************************************************
---------------------------------------------------------------------

Which will be rendered like:

.An Example Sidebar
************************************************
Any AsciiDoc SectionBody element (apart from
SidebarBlocks) can be placed inside a sidebar.
************************************************
