= AsciiDoc Guide
Dvly Yon <dvlyyon@github.com>
v1.0, 2017-06-15
:toc: right
:numbered:
:icons: font

[[D_Document-Structure]]
== 文章结构定义
从结构上来看，一篇文章通常包括多个<<D_Section,章节>>（section）。文章和每个章节通常都有标题用于分别概要文章和每个章节的内容。另外，在第一个章节之前，可能包括<<D_Preamble,前言>>。

=== 文章头（Document Header）
一篇文章除了具有一个文章标题（Document title）以外，通常还有其他文章属性（Document attribute），如作者，作者联系方式，版本，完成日期等。文章标题和文章属性信息组成了文章头，文章头是可选的

==== 文章标题（Document Title）
文章的标题定义很简单，它以等号（=）开始，后面至少包括一个空格，然后紧跟文章标题。如本文的标题定义如下
```
= AsciiDoc Guide
```

[[D_Docuemnt-Attribute]]
==== 文章属性（Document attribute）
文章属性是AsciiDoc区别于其他标签语言的主要特征。文章属性主要具有如下三个目的：

* 描述文章的基本信息：如作者、版本、创作时间等。这些属性当转换成完整的一篇文章或者一部书时会由AsciiDoc处理器特殊处理；

  = AsciiDoc Guide
  Dvly Yon <dvlyyon@github.com>
  v1.0, 2017-06-15

* 定义一些变量值，这些变量值在文章的后续章节中可以通过变量名被引用。在语法上，定义变量时，变量名冒号括起来（:变量名:），而在引用的时使用花括号（{变量名}）。通常在写一篇文章时不断重复一段话，这时建议你使用属性定义

  = AsciiDoc Guide
  :reference1: http://asciidoctor.org/docs/asciidoc-writers-guide/
  ...
  参考文献1：{reference1}

* 预定义的变量：这些变量由AsciiDoc处理器使用完成特定的功能，如果:toc:用于生成文章目录结构，:linkcss!:后面一个感叹号用于取消linkcss的定义等等。

  = AsciiDoc Guide
  Dvly Yon <dvlyyon@github.com>
  v1.0, 2017-06-15
  :toc:

[TIP]
====
* 文章头是可选的，如果存在，必须首先定义文章标题
* 文章头可以定义一个或者多个属性行，每个属性行定义一个属性。
* 文章头和文章其他部分必须使用一个或者多个空行分隔；并且文章头内部不能存在空行
====

[[D_Section]]
== 章节（section）
章节由章节标识（Section ID），章节标题（Section Title）和多个章节内容（Section Body)组成。章节可以嵌套，包含其他章节，从而组成层次式的结构。

[[D_Section-ID]]
=== 章节标识（section ID)
章节标识的目的，主要是为本章节定义一个锚点，以便在文章其他部分可以使用链接的形式进行引用。章节标识是可可选的，如果没有定义标识，处理器将会为每个文档和章节标题定义生成一个默认的标识，以便可以生成本文章的内容列表。其定义形式为

----
[[<章节标识>,默认引用标签]]
标识使用两个放括号括起来，标识可以包括字母，数字，下划线和连字符，其他字符被被替换为下划线
----

=== 章节标题 （section Title）
章节标题可以有两种定义方式，两行式和一行式

两行式：::
两行式的第一行是标题正文，紧接着由多个表示不同层次章节的字符组成的行，字符的个数应该超过标题正文的个数。=（Levele 0），-（Level 1），～（Level 2），^（Level 3），+（Level 4)。当标题名称为中文时，asciidoctor似乎不支持这种两行式的语法。

一行式：::
章节的标题前后使用1-6个等号定义（=），等号的数目表明了章节的嵌套层次。后面的等号是可以省略的，并且等号与标题之间至少一个空格。

  = Document Title (Level 0)
  == Level 1 Section
  === Level 2 Section
  ==== Level 3 Section
  ===== Level 4 Section
  ====== Level 5 Section
  == Another Level 1 Section

[TIP]
====
* 如果doctype属性被设置成book，可以包括多个0级别的标题，否则（默认的article)只能存在一个0级别的标题
* 章节的层次必须连续的，不能跳过某个层次
* 标题的标识符号可以使用井号（#），这样AsciiDoc可以很好的处理Markdown的文档结构
* 可以使用:numbered:文档属性对文档章节自动编号
====
章节的格式可以通过属性进行修改，请参考<<Advance_Section, 章节进阶>>获知如何定制章节的显示

[[D_Preamble]]
== 前言（preamble）
通常一本书在书名（Document title）和第一章节之间会存在序言，致谢等等部分。这部分英文为preamble。这部分可以有多个段落，AsciiDoc会使用特殊的方式对其进行处理，如果不存在书名或者文章名，这部分将不作为前言处理。

[[D_Section-Body]]
== 章节内容（Section Body）结构定义
如前所述<<Document-structure,文章结构定义>>，章节（Section）由标题和章节内容组成，并且可以包含其他下级章节。前面已经描述了章节层次和标题的定义。本章主要介绍章节内容的结构。章节内容可以包含多个块（Block）

每个块可以有个可选的块标题，块标识和块属性。块体可以是段落（Paragraph),分隔块（DelimitedBlock），列表，表格或者宏定义块。

=== 块标题（Block Title）
可选的块标题使用点号（.）标示，后面紧跟着块标题，如

  .出门检查项
  - 关闭门窗
  - 关闭电源
  - 关闭水、燃气开关

显示的结果如下

.出门检查项
- 关闭门窗
- 关闭电源
- 关闭水、燃气开关

=== 块标识（Block ID）
块标识和<<D_Section-ID,章节标识>>一样，具有相同的语法和相同的目的。例如，对于表格，可以产生文档中表格的列表索引

=== 块属性（Block Attributes）
块属性包括一些列的属性值，第一个属性值定义了块名称，定义了块的风格(style)，其他后续属性值基于不同的块名称，给出不同的属性参数。

----
.静夜思                   <1>
[[verse_jingyesi]]       <2>
[verse, 李 白, 唐诗宋词]   <3> <4> <5>
____
窗前明月光，疑是地上霜，
举头望明月，低头思故乡。
____
----

<1>	Title: Gettysburg Address
<2>	ID: gettysburg, see Defining an Anchor
<3>	Block name: quote
<4>	attribution: Abraham Lincoln (Named block attribute)
<5>	citetitle: Address delivered at the dedication of the Cemetery at Gettysburg (Named block attribute)

== 段落（Paragraph)
段落是一段正文，这段正文以一个空行或者EOF（end of file）结束，或者后面紧接着分隔块或者列表。可以使用三种语法（syntax）定义段落，并可以赋予段落不同的风格（style）。三种语法是正常式（normal），字面式（literal）和警示式（admonition）。风格（style）是用于指示AsciiDoc处理器如何处理下面的段落。每种语法的段落隐含了默认的风格。AsciiDoc内置的风格包括：normal，literal，verse，quote，listing，TIP，NOTE，IMPORTANT，WARNING，CAUTION,abstract,partintro,comment,example,sidebar,source,music,latex,graphivz。

=== 正常式（normal）段落
正常段落包括一行或多行不包括空行的正文，正常段落的第一行的起始字符不能是空白字符。正常式段落具有默认的normal风格。

=== 字面式（literal）段落
字面式段落也称为缩进式（indented）段落，因为段落的一行需要使用一个或者多个空格或者tab字符进行缩进。字面式段落使用等宽（monospaced）字体进行渲染，没有用于区分的背景和边界。并且在默认情况下，除了特殊字符（Special Characters）和Callouts意外，不对段落中的格式化或者替换的标签进行处理。字面式段落具有默认的literal风格。下面定义了字面式段落，表示标题的等号（=）字符保持字面值，不被特殊处理。

  Consul *necessitatibus* per id,
  consetetur, eu pro everti postulant
  homero verear ea mea, qui.

可以不使用缩进，而使用literal风格，明确说明下面的段落使用字面式段落，风格的定义是使用方括号，如[literal]

  [literal]
  Consul *necessitatibus* per id,
  consetetur, eu pro everti postulant
  homero verear ea mea, qui.

=== 援引（quote）和诗歌（verse）风格段落
这两中风格的定义可以包括两个可选的属性（attribute）：归属者（attribution）和引用标题

* 诗歌风格
诗歌风格保留换行符号，比如下面的一段

  [verse, William Blake, from Auguries of Innocence]
  To see a world in a grain of sand,
  And a heaven in a wild flower,
  Hold infinity in the palm of your hand,
  And eternity in an hour.

输出格式为：

[verse, William Blake, from Auguries of Innocence]
To see a world in a grain of sand,
And a heaven in a wild flower,
Hold infinity in the palm of your hand,
And eternity in an hour.

* 援引风格
援引风格不保留换行符号，援引的属性右对齐

  [quote, Bertrand Russell, The World of Mathematics (1956)]
  A good notation has subtlety and suggestiveness which at times makes
  it almost seem like a live teacher.

输出格式为：

[quote, Bertrand Russell, The World of Mathematics (1956)]
A good notation has subtlety and suggestiveness which at times makes
it almost seem like a live teacher.

=== 警示式（admonition)段落
警示式段落包括提示（TIP），关注（NOTE)，重要（IMPORTANT），警告（WARNING)和注意（CAUTION)。它们分别使用TIP:，NOTE:，IMPORTANT:，WARNING:和CAUTION:作为警示段落第一行的第一个单词。
它们分别对应同名的风格，使用风格可以得到同样的效果。比如

  TIP: This is an example note.
  或者
  [TIP]
  This is an example note.

输出为：

TIP: This is an example note.

NOTE: 警示段落的风格是可以配置的，可以使用icon, icons, iconsdir 和 caption属性进行调整

  [icons=None, caption="My Special Note"]
  NOTE: This is my special note.

== 分隔块（Delimited Blocks）
分隔块是上下分隔行封装的一块正文。分隔行由4个以上相同的分隔字符组成。分隔块类似于段落的风格，它指示了如何对分隔块中的文字进行渲染。AsciiDoc提供了下面几种预设的分隔块。

  CommentBlock:     //////////////////////////
  PassthroughBlock: ++++++++++++++++++++++++++
  ListingBlock:     --------------------------
  LiteralBlock:     ..........................
  SidebarBlock:     **************************
  QuoteBlock:       __________________________
  ExampleBlock:     ==========================
  OpenBlock:        --

.预定义分隔块定义
[cols="1e,1,5a",frame="topbot",options="header"]
|====================================================================
| | 分隔符 |应用场景

|PassthroughBlock | ++++ | 正文不进行任何转换直接原样输出
|ListingBlock     | ---- | 用于显示源代码，输入和屏幕输出
|LiteralBlock     | .... | 显示与输入相同
|SidebarBlock     | **** | 与文档正文并列显示
|QuoteBlock       | ____ | 用于引用或者诗歌，可带用参数
|ExampleBlock     | ==== | 用于举例
|OpenBlock        | --   | 比较特殊，只需要两个连线
|CommentBlock     | //// | 私有的注释，不被渲染显示
|====================================================================

.预定义分隔块对不同元素处理方式
[cols="2e,7*^",frame="topbot",options="header,autowidth"]
|=====================================================
| |Attributes |Callouts |Macros | Quotes |Replacements
|Special chars |Special words

|PassthroughBlock |Yes |No  |Yes |No  |No  |No  |No
|ListingBlock     |No  |Yes |No  |No  |No  |Yes |No
|LiteralBlock     |No  |Yes |No  |No  |No  |Yes |No
|SidebarBlock     |Yes |No  |Yes |Yes |Yes |Yes |Yes
|QuoteBlock       |Yes |No  |Yes |Yes |Yes |Yes |Yes
|ExampleBlock     |Yes |No  |Yes |Yes |Yes |Yes |Yes
|OpenBlock        |Yes |No  |Yes |Yes |Yes |Yes |Yes
|=====================================================

=== Listing Blocks
ListingBlocks使用等宽字体进行渲染，通常有区别于其他部分的背景和边框。不进行正文格式和替换的转换，支持特殊字符和Callouts。主要用于源代码，计算机输出，文件列表等

....
  --------------------------------------
  #include <stdio.h>

  int main() {
     printf("Hello World!\n");
     exit(0);
  }
  --------------------------------------
....

输出格式为

--------------------------------------
#include <stdio.h>

int main() {
   printf("Hello World!\n");
   exit(0);
}
--------------------------------------

=== Literal Blocks
LiteralBlock的显示格式与字面式段落相同
----
...................................
Consul *necessitatibus* per id,
consetetur, eu pro everti postulant
homero verear ea mea, qui.
...................................
----

显示格式为：

...................................
Consul *necessitatibus* per id,
consetetur, eu pro everti postulant
homero verear ea mea, qui.
...................................

=== Siderbar Blocks
SidebarBlock是一段独立于文章正文的文字，通常这段正文被渲染为加上边框，从而指示其与正文不同。

---------------------------------------------------------------------
.An Example Sidebar
************************************************
Any AsciiDoc SectionBody element (apart from
SidebarBlocks) can be placed inside a sidebar.
************************************************
---------------------------------------------------------------------

Which will be rendered like:

.An Example Sidebar
************************************************
Any AsciiDoc SectionBody element (apart from
SidebarBlocks) can be placed inside a sidebar.
************************************************

=== Comment Blocks
CommentBlock包含的内容只出现在原文中，会被AsciiDoc解释器忽略，不会被输出。

  //////////////////////////////////////////
  CommentBlock contents are not processed by
  asciidoc(1).
  //////////////////////////////////////////

NOTE: 系统的宏定义（System macros）在comment blocks中执行

=== Passthrough Blocks
PassthroughBlock仅支持属性（attributes）和宏（macros）替换。使用显示的_subs_属性可以进行不同的替换

  [subs="quotes"]
  ++++++++++++++++++++++++++++++++++++++
  <table border="1"><tr>
    <td>*Cell 1*</td>
    <td>*Cell 2*</td>
  </tr></table>
  ++++++++++++++++++++++++++++++++++++++

PassthroughBlock可以应用下面的风格

pass::
  不执行任何替换，相当于`subs=“none”`

asciimath, latexmath::
  默认情况下不支持任何替换，块的从内容被渲染成<<math_formula,数学公式>>

== 文本格式
文档的主要内容是有文本组成，上面提到的各类结构是为了文本的组织更加有序，更易利于阅读和理解。这里所说的文本是是指字或短语，它是组成文档的最小单位。

=== 引用式文本（Quoted text）
这类文本格式是通过使用特定引用字符将要格式化的文本引用起来定义的

斜体文本：::
  使用单引号(single quote characters)'或者下划线\_。它主要用于强调。 格式： _斜体文本_
粗体文本：::
  使用星号（asterisk characters）\*。它主要用于加重语气。 格式：*粗体文本*
等宽文本：::
  使用加号（plus）+ 或者反引号（backtick 或 grave accents）\`。等宽字体多用于源码。如果使用反引号，包括的文本将不再做进一步的解释。 格式：\+等宽文本+ 或  `等宽文本`
印刷体单引号（curved single quotation marks and Apostrophes and smart quote）：::
  先使用反引号，再使用单引号。格式：\'`单引号文本\`'。
  I'm a student. All of the werewolves`' desks were a mess

印刷体双引号（curved double quotation marks)：::
  先使用反引号，再使用双引号\"`双引号文本`"：
#非引用文本#::
  \#非引用文本#: 使用井号。主要是通过配合属性格式化文本

==== 引用式文本属性（Quoted text attribute)
引用式文本前面可以加上一个或者多个属性，从而改变文本的显示方式。这些属性通常包括文本颜色，文本背景颜色，字体大小，字体显示。如下

* 文本前景色：_<colore>_
* 文本背景色：_<colore>_-background
* 文本大小：big， small
* 文本修饰：underline, overline, line-through

列子：

----
[big red yellow-background]##AsciiDoc## is a #lightweight markup language# for [underline]##authoring notes, articles, documentation, books, web pages, slide decks and man pages## in plain text.
----

输出为：

[.big .red .yellow-background]#AsciiDoc# is a #lightweight markup language# for [.underline]##authoring notes, articles, documentation, books, web pages, slide decks and man pages## in plain text.

==== 引用式文本类型
存在两种类型引用式文本：受限型引用（constrained quotes）和非受限型引用（unconstrained quotes)

受限型：::
  受限型引用式文本前后必须有空格或者相邻的标点符号限定，这是通常使用的方式
非受限型：::
  非受限型没有边界的限定，可以使用在任何地方，为了避免歧义，使用两个引用符号定义(_,*,+,#)

*C*ontrained and **unconstrained**onstrained

=== 上标（Superscripts）和下标（Subscripts）
使用插入符号（carets）^括起来的正文被渲染为上标，使用波浪号（tildes）~括起来的正文被渲染为下标

  H~2~O java[red]^TM^

渲染为

H~2~O java[red]^TM^

上下标格式属于非限定型，可以使用属性前缀进一步进行修饰

=== 硬回车
* Line Breaks +
  加号（+）前面至少一个空格，并且放在一行的最后。或者使用hardbreaks属性。
[%hardbreaks]
Ruby is red.
Java is black.

* Page Breaks +
  包含至少三个小于号（<）的行作为页的分隔符

== 列表
存在下面几种类型的列表

.列表类型
- Bulleted lists:
- Numbered lists:
- Labelled lists:
- Callouts lists:

.列表行为

=== 无序列表（Bulledted Lists）
无序列表起始于单个连字符（dash）-或者一到五个星号，紧接着一些空格，然后是列表项正文

....
  - List Item
  * List Item
  ** List Item
  *** List Item
  **** List Item
  ***** List Item
....

=== 有序列表（Numbered lists）
有序列表的序号可以是显示的也可以是隐式的指定序号的风格，两者均支持自动嵌套

显示有序列表::
----
  1. 阿拉伯数字列表
  a. 小写字母列表
  A. 大写字母列表
  i) 小写罗马数字列表
  I) 大写罗马数字列表
----

隐式有序列表::
----
.  阿拉伯数字列表
.. 小写字母列表
... 小写罗马数字列表
.... 大写字母列表
..... 大写罗马数字列表
----

* 可以使用风格属性改变默写序号的风格。可以使用`arabic, loweralpha, upperalpha, lowerroman, upperroman`风格
* 可以使用start属性改变编号的起始值
....
1. 列表项1.
    a. 子列表项1
    b. 子列表项2
2. 列表项2。
    i) 子列表项1
    ii) 子列表项2
3. 列表项3
[upperroman,start=5]
    . 子列表项1
    . 子列表项2
    . 子列表项3
....
输出为

1. 列表项1.
    a. 子列表项1
    b. 子列表项2
2. 列表项2。
    i) 子列表项1
    ii) 子列表项2
3. 列表项3
[upperroman,start=5]
    . 子列表项1
    . 子列表项2
    . 子列表项3

=== 标签列表
标签列表的每个列表项有一个或者多个标签，标签可以是字母或者数字。标签必须位于一行的开始位置并且以2-4个冒号或者两个分号结束。一个列表项存在多个标签，每个标签一行。列表项的正文可以包含一行或者多行文字，也可以是嵌套的列表或者列表段落。列表项正文可以与列表标签处于同一行，或者另起一行。可以有选择地进行缩紧。
....
[horizontal]
周六::
周日::
  和朋友吃饭

  到公园去玩

周一:: 上课要带的东西
  * 语文书
  * 数学书
周二::
  注意事项
    骑车;;
      * 带墨镜
    开会;;
      做笔记:::
      * 要点：预算
....
==== 水平（horizontal）标签列表风格
可以使用[horizontal]使得列表项正文与列表项标签并排而不是在下面

=== 问答（Question and Answer）列表
具有预定义`qanda`风格的标签列表
----
[qanda]
What is AsciiDoctor?::
  An implementation of the AsciiDoc Processor in Ruby.
What day is today?:: Sunday
----
=== 词汇表 （glossary）
具有预定义`glossary`风格的标签列表
----
[glossary]
enrage::
  to make very angry
enrol::
  to make (oneself or another person) officially a member of a group
----
=== 参考书目（bibilography）
具有预定义`bibilography`风格的无序列表，生成DocBook参考书目列表
[bibilography]
.Optional list title
- [[[taoup]]] Eric Steven Raymond. 'The Art of UNIX Programming'. Addison-Wesley. ISBN 0-13-142901-9.
- [[[walsh-muellner]]] Norman Walsh & Leonard Muellner. 'DocBook -The Definitive Guide'. O'Reilly & Associates. 1999. ISBN 1-56592-580-7.

语法[[[<reference>]]]用于生成一个索引点<reference>, 显示为[taoup]，在文档其他地方可以使用\<<taoup>>建立链接

[[math_formula]]
== 数学公式

[[Advance_Section]]
== 章节进阶篇
