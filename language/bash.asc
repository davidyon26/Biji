= bash 参考手册
David Yon <davidyon@hotmail.com>
v1.0, 2017-07-11
:toc: right
:numbered:

== 定义
[glossary]
空白（blank）::
  空格或者tab字符
字（word）::
  被shell识别为一个处理单元的一串字符，也称为**token**
名（name）::
  仅包含字母数字和下划线的字，它的第一个字符是字符或者下滑线。也称为标识符（identifier）
原字符（metacharacter）::
  一个在非转义（unquoted) 情况下用来分隔字的字符，它包括如下的字符： +
  ``| & ; ( ) < > space tab newline``
控制操作符（control operator）::
  用于执行控制功能的字。它是如下符号： +
  ``||`` ``&`` ``&&`` ``;`` ``;;`` ``;&`` ``;;&`` ``(`` ``)`` ``|`` ``|&`` ``<newline>``
保留字（reserved words）::
  在shell环境下有特殊含义的字。下面的字在非转义并且作为简单命令的一个字或者``case``，``for``命令的第三个字的情况下为保留字： +
  ``! case coproc do done elif else esac fi for function if in select then until while { } time [[ ]]``

== 语言结构

== 函数（function）

语法：::
__name__ () __compound-command__ [__redirection__] +
**function** __name__ [()] __compound-command__ [__redirection__]
+
上面定义了名称为__name__的函数。保留字**function**是可选的，如果存在可以省略左右括号()。函数体由复合命令__compound-command__组成。复合命令是一串由花括号{}界定的命令。在posix模式下，函数的名称不能与内建的名相同。函数定义的返回值为0，除非出现语法错误或者出现重名函数。函数的执行状态是最后一条命令的执行状态。函数定义的重定义在函数执行时被执行。

函数是可以递归的。变量**FUNCNEST**可以用来定义递归调用的次数，如果超过这个次数，函数调用语句将失败（abort）。默认没有限制。

内建命令**return**如果在函数中被执行，将导致函数执行完成，``shell``将执行调用这个函数命令的后续命令。


== 参数（Parameters）

== 条件表达式（Conditional Expressions）
条件表达式用于复合命令（``[[``），以及``test``或``[``内建命令。它主要用于测试文件的属性，或者执行字符串比较和数的算术比较。条件表达式可以是一元的（unary）或者是二元的（binary）。一元表达式主要用于测试文件的属性。

=== 文件属性检测
[NOTE]
====
- 对于文件，如果是符号链接（symbolic links），相应的测试是基于链接的目标文件，而不是链接本身。
- 在下面表格中，如果__file__的格式是``/dev/fd/n``，那么文件描述符``n``被检测； 如果格式为``/dev/stdin``, ``/dev/stdout``或者``/dev/stderr``，那么文件描述符0， 1或者2被检测。
====

|====
| 表达式 | 含义

| -a __file__ +
 -e __file__
| 如果文件__file__存在，返回``True``

| -b __file__
| 如果文件__file__存在，且它是块（block）文件，返回``True``

| -c __file__
| 如果文件__file__存在，且它是字符（character）文件，返回``True``

| -d __file__
| 如果文件__file__存在，且它是目录文件，返回``True``

| -f __file__
| 如果文件__file__存在，且它是正规文件，返回``True``

| -g __file__
| 如果文件__file__存在，且``set-group-id``位被设置，返回``True``

| -h __file__ +
 -L __file__
| 如果文件__file__存在，且它是符号链接文件，返回``True``

| -k __file__
| 如果文件__file__存在，且``sticky``位被设置，返回``True``

| -p __file__
| 如果文件__file__存在，且是个被命名的管道（pipe）文件，返回``True``

| -r __file__
| 如果文件__file__存在，且是可读的，返回``True``

| -s __file__
| 如果文件__file__存在，且size大于0，返回``True``

| -t __fd__
| 如果文件描述符__fd__已被打开且被一个终端（terminal）指引，返回``True``

| -u __file__
| 如果文件__file__存在，且``set-user-id``位被设置，返回``True``

| -w __file__
| 如果文件__file__存在，且是可写的，返回``True``

| -x __file__
| 如果文件__file__存在，且是可执行的，返回``True``

| -G __file__
| 如果文件__file__存在，且存在有效的组标识符（group id），返回``True``

| -N __file__
| 如果文件__file__存在，且自从上次读过后已被修改了，返回``True``

| -O __file__
| 如果文件__file__存在，且存在有效的用户标识符（user id），返回``True``

| -S __file__
| 如果文件__file__存在，且是个套接字（socket）文件，返回``True``

| __file1__ -ef __file2__
| 如果__file1__和__file2__指引相同的设备，具有相同的inode number，返回``True``

| __file1__ -nt __file2__
| 如果根据修改日期，文件__file1__比__file2__新，或者文件__file1__存在，而__file2__不存在，返回``True``

| __file1__ -ot __file2__
| 如果根据修改日期，文件__file1__比__file2__旧，或者__file2__存在，而__file1__不存在，返回``True``
|====

=== 字符串比较
[NOTE]
====
- 操作符``<``，``>``在复合命令``[[ ]]``中使用当前区域（locale）的词典编排顺序进行比较，而在内建命令``test``中使用ASCII顺序
- 当使用操作符``==``，``!=``时，如果shell选项``extglob``打开，右边的字符串被看作模式（pattern），根据<<Pattern_Matching,模式匹配>>（Pattern Match）的进行匹配。``extglob``默认是打开的。
- shell选项``nocasematch``会影响匹配是否忽略大小写，请参考<<ShOpt_Builtin,Shell内建选项>>
====

[cols="1,3"]
|====
| 表达式 | 含义

| -z __string__
| 如果字符串__string__长度为0，返回``True``

| __string__ +
 -n __string__
| 如果字符串__string__的长度非0，返回``True``

| __string1__ == __string2__ +
 __string1__ = __string2__
| 两个字符串相等或匹配，返回``True``。 在test命令中应该使用**=**，以便遵循POSIX规定。当用于复合命令``[[ ]]``中，其结果是__string1__是否匹配__string2__

| __string1__ < __string2__
| 如果__string1__排在__string2__前面，返回``True``

| __string1__ > __string2__
| 如果__string1__排在__string2__后面，返回``True``
|====

=== 算术逻辑比较

[cols="1,3"]
|====
| 表达式 | 含义

| __arg1__ **OP** __arg2__
| **OP**是``-eq`` ``-ne`` ``-lt`` ``-le`` ``-gt``或者``-ge``。如果__arg1__等于，不等于，小于，小于等于，大于或者大于等于__arg2__，返回``true``。__arg1__和__arg2__可以是正数或者负数。
|====

=== 其他比较

|====
| 表达式 | 含义

| -o __optname__
| 如果shell选项__optname__是enabled，返回``True``。 具体的__optname__请参考set内建命令的``-o``选项

| -v __varname__
| 如果shell变量__varname__已经被设置（赋给了一个值），返回``True``

| -R __varname__
| 如果shell变量__varname__已经被设置，并且是一个名引用（name reference），返回``True``
|====

[[Pattern_Matching]]
== 模式匹配（Pattern Matching）
模式匹配是一串字符，除了特殊字符以外字符匹配字符本身，如果需要匹配特殊字符本身，需要使用反斜杠\取消其特殊含义。模式中的特殊字符如下。

[cols="1,3a"]
|===
| 特殊字符 | 含义

| *
| 匹配任何字符串，包括null字符串。当shell选项``globstar``打开（enabled），并且匹配使用在路径扩展（pathname expansion）情况下，两个相邻的星号字符（``**``）用于匹配所有文件和0或者多个目录及其子目录。如果后面跟着斜杠字符，即``**/``,则其仅匹配目录和子目录。

| ?
| 匹配任何一个字符

| [...]
| 匹配任何被括起来的字符。

- 如果一对字符使用连字符（-），那么这是区间表达式（range expression），两个字符之间的任何字符被匹配。如[a-d]匹配a,b,c,d
- 字符使用当前区域的字符集以及当前区域的字符顺序
- 区域表达式中的字符的顺序取决于当前区域以及``LC_COLLATE``或者``LC_ALL``shell变量
- 如果[]中的第一个字符是``!``或者``^``,则匹配任何不包含在其中的字符。
- 如果想匹配连字符-，需要将其置为最前面或者最后面即``[-...]``或者``[...-]``
- 如果想匹配]，需要将其放到最前面，即``[]...]``
- 在[和]之间，可以使用字符类（character classes），格式为``[:class:]``。class是下面POSIX标准定义中的class: ``alnum``，``alpha``，``ascii``，``blank``，``cntrl``，``digit``，``graph``，``lower``，``print``，``punct``，``space``，``upper``，``word``，``xdigit``
- 在[和]之间，等价类（equivalence class）可以使用语法``[=c=]``指定，用于匹配在当前区域与字符c具有相同编序权重（collation weight）的字符
- 在[和]之间，使用``[.symbol.]``用于匹配编序符号（collating symbol）``symbol``。编序符号与特定的locale有关。一个编序符号通常两个或者多个字符组成，但是在某个领域表示一个不可分割的字符单元，具有一个编码。如在汉语发音中ue使用是一个独立的发音单位，不同于u和e的组合。这样[.ue.]不应该匹配单独u和e，而应该匹配ue所对应的编序位字符。
|====

- ``[:class]``，``[=c=]``，``[.symbol]``必须使用在``[``和``]``之中才具有其特殊含义，如匹配一个大写字母，其语法应该是
+
----
[[ "U" == [[:upper:]] ]] && echo "match",而不能写成
[[ "U" == [:upper:] ]]
----
- 关于POSIX中关于locale的规范请参考<<POSIX_2008>>
- 下面的格式在使用``shopt``命令打开shell选项``extglob``后可用。在后续描述中的模式列表__pattern-list__是指一或多个由竖线分隔的模式。

|===
| 特殊字符 | 含义

| ?(__pattern-list__)
| 匹配模式列表__pattern-list__中的模式的0或者1次出现

| *(__pattern-list__)
| 匹配模式列表__pattern-list__中任意模式的0或者多次出现

| +(__pattern-list__)
| 匹配模式列表__pattern-list__中任意模式的1或者多次出现

| @(__pattern-list__)
| 匹配模式列表__pattern-list__中任意一个模式

| !(__pattern-list__)
| 与模式列表__pattern-list__中任意模式均不匹配的字符串
|===

== Shell内建命令

[[ShOpt_Builtin]]
=== shopt

== 参考文献
[bibilography]
- [[[POSIX_2008]]]  http://pubs.opengroup.org/onlinepubs/9699919799/[POSIX IEEE Std 1003.1-2008, 2016 Edition]
